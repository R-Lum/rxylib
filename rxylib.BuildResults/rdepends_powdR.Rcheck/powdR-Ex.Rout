
R Under development (unstable) (2022-06-27 r82528) -- "Unsuffered Consequences"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "powdR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "powdR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('powdR')
powdR: Full Pattern Summation of X-Ray Powder Diffraction Data
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("afps")
> ### * afps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: afps
> ### Title: Automated full pattern summation
> ### Aliases: afps
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> # Load the soils data
> data(soils)
> 
> ## Not run: 
> ##D afps_sand <-  afps(lib = minerals,
> ##D                  smpl = soils$sandstone,
> ##D                  std = "QUA.2",
> ##D                  align = 0.2,
> ##D                  lod = 0.2,
> ##D                  amorphous = "ORG",
> ##D                  amorphous_lod = 1)
> ##D 
> ##D afps_lime <- afps(lib = minerals,
> ##D                 smpl = soils$limestone,
> ##D                 std = "QUA.2",
> ##D                 align = 0.2,
> ##D                 lod = 0.2,
> ##D                 amorphous = "ORG",
> ##D                 amorphous_lod = 1)
> ##D 
> ##D afps_granite <- afps(lib = minerals,
> ##D                    smpl = soils$granite,
> ##D                    std = "QUA.2",
> ##D                    align = 0.2,
> ##D                    lod = 0.2,
> ##D                    amorphous = "ORG",
> ##D                    amorphous_lod = 1)
> ##D 
> ##D #Alternatively run all 3 at once using lapply
> ##D 
> ##D afps_soils <- lapply(soils, afps,
> ##D                      lib = minerals,
> ##D                      std = "QUA.2",
> ##D                      align = 0.2,
> ##D                      lod = 0.2,
> ##D                      amorphous = "ORG",
> ##D                      amorphous_lod = 1)
> ##D 
> ##D #Automated quantification using the rockjock library
> ##D 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D #This takes a few minutes to run
> ##D rockjock_a1 <- afps(lib = rockjock,
> ##D                     smpl = rockjock_mixtures$Mix1,
> ##D                     std = "CORUNDUM",
> ##D                     align = 0.3,
> ##D                     lod = 1)
> ##D 
> ##D #Quantifying the same sample but defining the internal standard
> ##D #concentration (also takes a few minutes to run):
> ##D rockjock_a1s <- afps(lib = rockjock,
> ##D                      smpl = rockjock_mixtures$Mix1,
> ##D                      std = "CORUNDUM",
> ##D                      std_conc = 20,
> ##D                      align = 0.3,
> ##D                      lod = 1)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("afps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("afps.powdRlib")
> ### * afps.powdRlib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: afps.powdRlib
> ### Title: Automated full pattern summation
> ### Aliases: afps.powdRlib
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> # Load the soils data
> data(soils)
> 
> ## Not run: 
> ##D afps_sand <-  afps(lib = minerals,
> ##D                  smpl = soils$sandstone,
> ##D                  std = "QUA.2",
> ##D                  align = 0.2,
> ##D                  lod = 0.2,
> ##D                  amorphous = "ORG",
> ##D                  amorphous_lod = 1)
> ##D 
> ##D afps_lime <- afps(lib = minerals,
> ##D                 smpl = soils$limestone,
> ##D                 std = "QUA.2",
> ##D                 align = 0.2,
> ##D                 lod = 0.2,
> ##D                 amorphous = "ORG",
> ##D                 amorphous_lod = 1)
> ##D 
> ##D afps_granite <- afps(lib = minerals,
> ##D                    smpl = soils$granite,
> ##D                    std = "QUA.2",
> ##D                    align = 0.2,
> ##D                    lod = 0.2,
> ##D                    amorphous = "ORG",
> ##D                    amorphous_lod = 1)
> ##D 
> ##D #Alternatively run all 3 at once using lapply
> ##D 
> ##D afps_soils <- lapply(soils, afps,
> ##D                      lib = minerals,
> ##D                      std = "QUA.2",
> ##D                      align = 0.2,
> ##D                      lod = 0.2,
> ##D                      amorphous = "ORG",
> ##D                      amorphous_lod = 1)
> ##D 
> ##D #Automated quantification using the rockjock library
> ##D 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D #This takes a few minutes to run
> ##D rockjock_a1 <- afps(lib = rockjock,
> ##D                     smpl = rockjock_mixtures$Mix1,
> ##D                     std = "CORUNDUM",
> ##D                     align = 0.3,
> ##D                     lod = 1)
> ##D 
> ##D #Quantifying the same sample but defining the internal standard
> ##D #concentration (also takes a few minutes to run):
> ##D rockjock_a1s <- afps(lib = rockjock,
> ##D                      smpl = rockjock_mixtures$Mix1,
> ##D                      std = "CORUNDUM",
> ##D                      std_conc = 20,
> ##D                      align = 0.3,
> ##D                      lod = 1)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("afps.powdRlib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("align_xy")
> ### * align_xy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: align_xy
> ### Title: Align XRPD data to a given standard
> ### Aliases: align_xy
> 
> ### ** Examples
> 
> # Load soils xrd data
> data(soils)
> 
> #Load minerals library
> data(minerals)
> 
> ## Not run: 
> ##D #Create a standard quartz pattern to align to
> ##D quartz <- data.frame(tth = minerals$tth,
> ##D                      counts = minerals$xrd$QUA.1)
> ##D 
> ##D #Plot the main quartz peak prior to alignment
> ##D plot(soils, wavelength = "Cu",
> ##D      xlim = c(26,27),
> ##D      normalise = TRUE)
> ##D 
> ##D #align data
> ##D aligned <- align_xy(soils,
> ##D                     std = quartz,
> ##D                     xmin = 10,
> ##D                     xmax = 60,
> ##D                     xshift = 0.2)
> ##D 
> ##D #replot data
> ##D plot(aligned, wavelength = "Cu",
> ##D      xlim = c(26,27),
> ##D      normalise = TRUE)
> ##D 
> ##D #Alternatively try with a single XY object
> ##D 
> ##D unaligned <- as_multi_xy(list("quartz" = quartz,
> ##D                              "sandstone" = soils$sandstone))
> ##D 
> ##D plot(unaligned, wav = "Cu",
> ##D      xlim = c(26,27), normalise = TRUE)
> ##D 
> ##D sandstone_a <- align_xy(soils$sandstone,
> ##D                         std = quartz,
> ##D                         xmin = 10,
> ##D                         xmax = 60,
> ##D                         xshift = 0.3)
> ##D 
> ##D aligned <- as_multi_xy(list("quartz" = quartz,
> ##D                             "sandstone" = sandstone_a))
> ##D 
> ##D plot(aligned, wav = "Cu",
> ##D      xlim = c(26,27), normalise = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("align_xy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("align_xy.XY")
> ### * align_xy.XY
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: align_xy.XY
> ### Title: Align XRPD data in an XY object to a given standard
> ### Aliases: align_xy.XY
> 
> ### ** Examples
> 
> # Load soils xrd data
> data(soils)
> 
> #Load minerals library
> data(minerals)
> 
> ## Not run: 
> ##D 
> ##D #Create a standard quartz pattern to align to
> ##D quartz <- data.frame(tth = minerals$tth,
> ##D                      counts = minerals$xrd$QUA.1)
> ##D 
> ##D unaligned <- as_multi_xy(list("quartz" = quartz,
> ##D                               "sandstone" = soils$sandstone))
> ##D 
> ##D plot(unaligned, wav = "Cu",
> ##D      xlim = c(26,27), normalise = TRUE)
> ##D 
> ##D sandstone_a <- align_xy(soils$sandstone,
> ##D                         std = quartz,
> ##D                         xmin = 10,
> ##D                         xmax = 60,
> ##D                         xshift = 0.3)
> ##D 
> ##D aligned <- as_multi_xy(list("quartz" = quartz,
> ##D                             "sandstone" = sandstone_a))
> ##D 
> ##D plot(aligned, wav = "Cu",
> ##D      xlim = c(26,27), normalise = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("align_xy.XY", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("align_xy.multiXY")
> ### * align_xy.multiXY
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: align_xy.multiXY
> ### Title: Align XRPD data in a multiXY object to a given standard
> ### Aliases: align_xy.multiXY
> 
> ### ** Examples
> 
> # Load soils xrd data
> data(soils)
> 
> #Load minerals library
> data(minerals)
> 
> ## Not run: 
> ##D #Create a standard quartz pattern to align to
> ##D quartz <- data.frame(tth = minerals$tth,
> ##D                      counts = minerals$xrd$QUA.1)
> ##D 
> ##D #Plot the main quartz peak prior to alignment
> ##D plot(soils, wavelength = "Cu",
> ##D      xlim = c(26,27),
> ##D      normalise = TRUE)
> ##D 
> ##D #align data
> ##D aligned <- align_xy(soils,
> ##D                     std = quartz,
> ##D                     xmin = 10,
> ##D                     xmax = 60,
> ##D                     xshift = 0.2)
> ##D 
> ##D #replot data
> ##D plot(aligned, wavelength = "Cu",
> ##D      xlim = c(26,27),
> ##D      normalise = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("align_xy.multiXY", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as_multi_xy")
> ### * as_multi_xy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as_multi_xy
> ### Title: Create a multiXY object
> ### Aliases: as_multi_xy
> 
> ### ** Examples
> 
> 
> #EXAMPLE 1
> 
> #load soils data
> data(soils)
> 
> #extract first two samples from the list
> soils <- soils[c(1:2)]
> 
> #convert to multiXY
> soils <- as_multi_xy(soils)
> 
> #EXAMPLE 2
> #load the soils data
> data(soils)
> 
> #Convert to data frame
> soils_df <- multi_xy_to_df(soils,
+                            tth = TRUE)
> 
> #Convert back to multiXY object
> soils2 <- as_multi_xy(soils_df)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as_multi_xy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as_multi_xy.data.frame")
> ### * as_multi_xy.data.frame
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as_multi_xy.data.frame
> ### Title: Create a multiXY object from a list of XRPD data
> ### Aliases: as_multi_xy.data.frame
> 
> ### ** Examples
> 
> #load the soils data
> data(soils)
> 
> #Convert to data frame
> soils_df <- multi_xy_to_df(soils,
+                            tth = TRUE)
> 
> #Convert back to multiXY object
> soils2 <- as_multi_xy(soils_df)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as_multi_xy.data.frame", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as_multi_xy.list")
> ### * as_multi_xy.list
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as_multi_xy.list
> ### Title: Create a multiXY object from a list of XRPD data
> ### Aliases: as_multi_xy.list
> 
> ### ** Examples
> 
> #' #load soils data
> data(soils)
> 
> #extract first two samples from the list
> soils <- soils[c(1:2)]
> 
> #convert to multiXY
> soils <- as_multi_xy(soils)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as_multi_xy.list", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as_xy")
> ### * as_xy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as_xy
> ### Title: Create an XY object
> ### Aliases: as_xy
> 
> ### ** Examples
> 
> # Load soils xrd data
> data(rockjock_mixtures)
> 
> xy <- as_xy(rockjock_mixtures$Mix1)
> 
> class(xy)
[1] "XY"         "data.frame"
> 
> ## Not run: 
> ##D plot(xy, wavelength = "Cu")
> ##D plot(xy, wavelength = "Cu", interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as_xy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bkg")
> ### * bkg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bkg
> ### Title: Fit a background to XRPD data
> ### Aliases: bkg
> 
> ### ** Examples
> 
> data(soils)
> ## Not run: 
> ##D fit_bkg <- bkg(soils$granite)
> ##D plot(bkg)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bkg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("close_quant")
> ### * close_quant
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: close_quant
> ### Title: Close the phase concentration data within a 'powdRfps' or
> ###   'powdRafps' object
> ### Aliases: close_quant
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D rockjock_1 <- fps(lib = rockjock,
> ##D                   smpl = rockjock_mixtures$Mix1,
> ##D                   refs = c("ORDERED_MICROCLINE",
> ##D                            "LABRADORITE",
> ##D                            "KAOLINITE_DRY_BRANCH",
> ##D                            "MONTMORILLONITE_WYO",
> ##D                            "ILLITE_1M_RM30",
> ##D                            "CORUNDUM"),
> ##D                  std = "CORUNDUM",
> ##D                  align = 0.3,
> ##D                  std_conc = 20)
> ##D 
> ##D sum(rockjock_1$phases$phase_percent)
> ##D 
> ##D rockjock_1c <- close_quant(rockjock_1)
> ##D 
> ##D sum(rockjock_1c$phases$phase_percent)
> ##D 
> ##D rockjock_a1 <- afps(lib = rockjock,
> ##D                     smpl = rockjock_mixtures$Mix1,
> ##D                     std = "CORUNDUM",
> ##D                     align = 0.3,
> ##D                     lod = 1,
> ##D                     std_conc = 20)
> ##D 
> ##D sum(rockjock_a1$phases$phase_percent)
> ##D 
> ##D rockjock_a1c <- close_quant(rockjock_a1)
> ##D 
> ##D sum(rockjock_a1c$phases$phase_percent)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("close_quant", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("close_quant.powdRafps")
> ### * close_quant.powdRafps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: close_quant.powdRafps
> ### Title: Close the phase concentration data within a 'powdRafps' object
> ### Aliases: close_quant.powdRafps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D rockjock_a1 <- afps(lib = rockjock,
> ##D                     smpl = rockjock_mixtures$Mix1,
> ##D                     std = "CORUNDUM",
> ##D                     align = 0.3,
> ##D                     lod = 1,
> ##D                     std_conc = 20)
> ##D 
> ##D sum(rockjock_a1$phases$phase_percent)
> ##D 
> ##D rockjock_a1c <- close_quant(rockjock_a1)
> ##D 
> ##D sum(rockjock_a1c$phases$phase_percent)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("close_quant.powdRafps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("close_quant.powdRfps")
> ### * close_quant.powdRfps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: close_quant.powdRfps
> ### Title: Close the phase concentration data within a 'powdRfps' object
> ### Aliases: close_quant.powdRfps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D rockjock_1 <- fps(lib = rockjock,
> ##D                   smpl = rockjock_mixtures$Mix1,
> ##D                   refs = c("ORDERED_MICROCLINE",
> ##D                            "LABRADORITE",
> ##D                            "KAOLINITE_DRY_BRANCH",
> ##D                            "MONTMORILLONITE_WYO",
> ##D                            "ILLITE_1M_RM30",
> ##D                            "CORUNDUM"),
> ##D                  std = "CORUNDUM",
> ##D                  align = 0.3,
> ##D                  std_conc = 20)
> ##D 
> ##D sum(rockjock_1$phases$phase_percent)
> ##D 
> ##D rockjock_1c<- close_quant(rockjock_1)
> ##D 
> ##D sum(rockjock_1c$phases$phase_percent)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("close_quant.powdRfps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("delta")
> ### * delta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: delta
> ### Title: Calculate the Delta value for a fitted pattern
> ### Aliases: delta
> 
> ### ** Examples
> 
> # Load soils xrd data
> data(soils)
> 
> #Load minerals library
> data(minerals)
> 
> ## Not run: 
> ##D #Produce a fit
> ##D fps_sand <-  fps(lib = minerals,
> ##D                  smpl = soils$sandstone,
> ##D                  refs = minerals$phases$phase_id,
> ##D                  std = "QUA.1",
> ##D                  align = 0.2)
> ##D 
> ##D delta(measured = fps_sand$measured,
> ##D       fitted = fps_sand$fitted)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("delta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("extract_xy")
> ### * extract_xy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: extract_xy
> ### Title: Import and extract XY data from proprietary files
> ### Aliases: extract_xy
> 
> ### ** Examples
> 
> #load example RAW file
> file <- system.file("extdata/D5000/RAW/D5000_1.RAW", package = "powdR")
> raw1 <- extract_xy(file)

[read_xyData()] >> File of type Siemens/Bruker RAW detected
> 
> #Load multiple RAW files
> files <- dir(system.file("extdata/D5000/RAW", package = "powdR"),
+              full.names = TRUE)
> raw_list <- extract_xy(files)

[read_xyData()] >> File of type Siemens/Bruker RAW detected

[read_xyData()] >> File of type Siemens/Bruker RAW detected

[read_xyData()] >> File of type Siemens/Bruker RAW detected

[read_xyData()] >> File of type Siemens/Bruker RAW detected

[read_xyData()] >> File of type Siemens/Bruker RAW detected
> 
> class(raw_list)
[1] "multiXY" "list"   
> 
> ## Not run: 
> ##D plot(raw_list, wavelength = "Cu")
> ##D plot(raw_list, wavelength = "Cu", interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("extract_xy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fps")
> ### * fps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fps
> ### Title: Full pattern summation
> ### Aliases: fps
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> # Load the soils data
> data(soils)
> 
> #Since the reference library is relatively small,
> #the whole library can be used at once to get an
> #estimate of the phases within each sample.
> ## Not run: 
> ##D fps_sand <-  fps(lib = minerals,
> ##D                  smpl = soils$sandstone,
> ##D                  refs = minerals$phases$phase_id,
> ##D                  std = "QUA.1",
> ##D                  align = 0.2)
> ##D 
> ##D fps_lime <- fps(lib = minerals,
> ##D                 smpl = soils$limestone,
> ##D                 refs = minerals$phases$phase_id,
> ##D                 std = "QUA.1",
> ##D                 align = 0.2)
> ##D 
> ##D fps_granite <- fps(lib = minerals,
> ##D                    smpl = soils$granite,
> ##D                    refs = minerals$phases$phase_id,
> ##D                    std = "QUA.1",
> ##D                    align = 0.2)
> ##D 
> ##D #Alternatively run all 3 at once using lapply
> ##D 
> ##D fps_soils <- lapply(soils, fps,
> ##D                     lib = minerals,
> ##D                     std = "QUA.2",
> ##D                     refs = minerals$phases$phase_id,
> ##D                     align = 0.2)
> ##D 
> ##D #Using the rockjock library:
> ##D 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D rockjock_1 <- fps(lib = rockjock,
> ##D                   smpl = rockjock_mixtures$Mix1,
> ##D                   refs = c("ORDERED_MICROCLINE",
> ##D                            "LABRADORITE",
> ##D                            "KAOLINITE_DRY_BRANCH",
> ##D                            "MONTMORILLONITE_WYO",
> ##D                            "ILLITE_1M_RM30",
> ##D                            "CORUNDUM"),
> ##D                   std = "CORUNDUM",
> ##D                   align = 0.3)
> ##D 
> ##D #Alternatively you can specify the internal standard
> ##D #concentration if known:
> ##D rockjock_1s <- fps(lib = rockjock,
> ##D                  smpl = rockjock_mixtures$Mix1,
> ##D                  refs = c("ORDERED_MICROCLINE",
> ##D                           "LABRADORITE",
> ##D                           "KAOLINITE_DRY_BRANCH",
> ##D                           "MONTMORILLONITE_WYO",
> ##D                           "ILLITE_1M_RM30",
> ##D                           "CORUNDUM"),
> ##D                  std = "CORUNDUM",
> ##D                  std_conc = 20,
> ##D                  align = 0.3)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fps.powdRlib")
> ### * fps.powdRlib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fps.powdRlib
> ### Title: Full pattern summation
> ### Aliases: fps.powdRlib
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> # Load the soils data
> data(soils)
> 
> #Since the reference library is relatively small,
> #the whole library can be used at once to get an
> #estimate of the phases within each sample.
> ## Not run: 
> ##D fps_sand <-  fps(lib = minerals,
> ##D                  smpl = soils$sandstone,
> ##D                  refs = minerals$phases$phase_id,
> ##D                  std = "QUA.1",
> ##D                  align = 0.2)
> ##D 
> ##D fps_lime <- fps(lib = minerals,
> ##D                 smpl = soils$limestone,
> ##D                 refs = minerals$phases$phase_id,
> ##D                 std = "QUA.1",
> ##D                 align = 0.2)
> ##D 
> ##D fps_granite <- fps(lib = minerals,
> ##D                    smpl = soils$granite,
> ##D                    refs = minerals$phases$phase_id,
> ##D                    std = "QUA.1",
> ##D                    align = 0.2)
> ##D 
> ##D #Alternatively run all 3 at once using lapply
> ##D 
> ##D fps_soils <- lapply(soils, fps,
> ##D                     lib = minerals,
> ##D                     std = "QUA.2",
> ##D                     refs = minerals$phases$phase_id,
> ##D                     align = 0.2)
> ##D 
> ##D #Using the rockjock library:
> ##D 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D rockjock_1 <- fps(lib = rockjock,
> ##D                   smpl = rockjock_mixtures$Mix1,
> ##D                   refs = c("ORDERED_MICROCLINE",
> ##D                            "LABRADORITE",
> ##D                            "KAOLINITE_DRY_BRANCH",
> ##D                            "MONTMORILLONITE_WYO",
> ##D                            "ILLITE_1M_RM30",
> ##D                            "CORUNDUM"),
> ##D                   std = "CORUNDUM",
> ##D                   align = 0.3)
> ##D 
> ##D #Alternatively you can specify the internal standard
> ##D #concentration if known:
> ##D rockjock_1s <- fps(lib = rockjock,
> ##D                  smpl = rockjock_mixtures$Mix1,
> ##D                  refs = c("ORDERED_MICROCLINE",
> ##D                           "LABRADORITE",
> ##D                           "KAOLINITE_DRY_BRANCH",
> ##D                           "MONTMORILLONITE_WYO",
> ##D                           "ILLITE_1M_RM30",
> ##D                           "CORUNDUM"),
> ##D                  std = "CORUNDUM",
> ##D                  std_conc = 20,
> ##D                  align = 0.3)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fps.powdRlib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fps_lm")
> ### * fps_lm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fps_lm
> ### Title: Full pattern summation using linear regression
> ### Aliases: fps_lm
> 
> ### ** Examples
> 
> data(rockjock)
> data(rockjock_mixtures)
> 
> #Compute the PCA and loadings
> x1 <- xrpd_pca(rockjock_mixtures,
+                mean_center = TRUE,
+                bin_size = 1,
+                root_transform = 1)
> 
> ## Not run: 
> ##D fps_lm_out <- fps_lm(rockjock,
> ##D                      smpl = data.frame("x" = x1$loadings$tth,
> ##D                                        "y" = x1$loadings$Dim.1),
> ##D                      refs = rockjock$phases$phase_id,
> ##D                      std = "QUARTZ",
> ##D                      align = 0.3,
> ##D                      p = 0.01)
> ##D 
> ##D plot(fps_lm_out,
> ##D      wavelength = "Cu",
> ##D      interactive = TRUE,
> ##D      group = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fps_lm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fps_lm.powdRlib")
> ### * fps_lm.powdRlib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fps_lm.powdRlib
> ### Title: Full pattern summation using linear regression
> ### Aliases: fps_lm.powdRlib
> 
> ### ** Examples
> 
> data(rockjock)
> data(rockjock_mixtures)
> 
> #Compute the PCA and loadings
> x1 <- xrpd_pca(rockjock_mixtures,
+                mean_center = TRUE,
+                bin_size = 1,
+                root_transform = 1)
> 
> ## Not run: 
> ##D fps_lm_out <- fps_lm(rockjock,
> ##D                      smpl = data.frame("x" = x1$loadings$tth,
> ##D                                        "y" = x1$loadings$Dim.1),
> ##D                      refs = rockjock$phases$phase_id,
> ##D                      std = "QUARTZ",
> ##D                      align = 0.3,
> ##D                      p = 0.01)
> ##D 
> ##D plot(fps_lm_out,
> ##D      wavelength = "Cu",
> ##D      interactive = TRUE,
> ##D      group = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fps_lm.powdRlib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interpolate")
> ### * interpolate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interpolate
> ### Title: Interpolate an XY, multiXY or powdRlib object to a given 2theta
> ###   scale.
> ### Aliases: interpolate
> 
> ### ** Examples
> 
> #Define a new 2theta scale:
> data(rockjock_mixtures)
> tth <- seq(10, 60, 0.04)
> 
> #interpolate multiXY object of data onto new scale
> i1 <- interpolate(rockjock_mixtures, new_tth = tth)
> 
> #interpolate XY object onto new scale
> i2 <- interpolate(rockjock_mixtures$Mix1, new_tth = tth)
> 
> #interpolate powdRlib object onto new scale
> i3 <- interpolate(minerals, new_tth = tth)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interpolate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interpolate.XY")
> ### * interpolate.XY
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interpolate.XY
> ### Title: Interpolate an 'XY' object onto a given 2theta scale.
> ### Aliases: interpolate.XY
> 
> ### ** Examples
> 
> data(rockjock_mixtures)
> 
> #Define a new 2theta scale:
> tth <- seq(10, 60, 0.04)
> 
> #interpolate data onto new scale
> i1 <- interpolate(rockjock_mixtures$Mix1, new_tth = tth)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interpolate.XY", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interpolate.multiXY")
> ### * interpolate.multiXY
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interpolate.multiXY
> ### Title: Interpolate a multiXY object onto a given 2theta scale.
> ### Aliases: interpolate.multiXY
> 
> ### ** Examples
> 
> data(rockjock_mixtures)
> 
> #Define a new 2theta scale:
> tth <- seq(10, 60, 0.04)
> 
> #interpolate data onto new scale
> i1 <- interpolate(rockjock_mixtures, new_tth = tth)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interpolate.multiXY", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interpolate.powdRlib")
> ### * interpolate.powdRlib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interpolate.powdRlib
> ### Title: Interpolate a 'powdRlib' object onto a given 2theta scale.
> ### Aliases: interpolate.powdRlib
> 
> ### ** Examples
> 
> data(minerals)
> 
> #Define a new 2theta scale:
> tth <- seq(10, 60, 0.04)
> 
> #interpolate data onto new scale
> i1 <- interpolate(minerals, new_tth = tth)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interpolate.powdRlib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("merge.powdRlib")
> ### * merge.powdRlib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: merge.powdRlib
> ### Title: Merge two powdRlib objects
> ### Aliases: merge.powdRlib
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> #Load the rockjock library
> data(rockjock)
> 
> #interpolate minerals library onto same 2theta as rockjock
> minerals_i <- interpolate(minerals, new_tth = rockjock$tth)
> 
> #merge the libraries
> merged_lib <- merge(rockjock, minerals_i)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("merge.powdRlib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("multi_xy_to_df")
> ### * multi_xy_to_df
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: multi_xy_to_df
> ### Title: Convert a multiXY object to a data frame.
> ### Aliases: multi_xy_to_df
> 
> ### ** Examples
> 
> #Load the minerals library
> data(soils)
> 
> soils_df1 <- multi_xy_to_df(soils, tth = TRUE)
> soils_df2 <- multi_xy_to_df(soils, tth = FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("multi_xy_to_df", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("multi_xy_to_df.multiXY")
> ### * multi_xy_to_df.multiXY
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: multi_xy_to_df.multiXY
> ### Title: Convert a multiXY object to a data frame.
> ### Aliases: multi_xy_to_df.multiXY
> 
> ### ** Examples
> 
> #Load the minerals library
> data(soils)
> 
> soils_df1 <- multi_xy_to_df(soils, tth = TRUE)
> soils_df2 <- multi_xy_to_df(soils, tth = FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("multi_xy_to_df.multiXY", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("omit_std")
> ### * omit_std
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: omit_std
> ### Title: Omit the internal standard from phase concentration data within
> ###   a 'powdRfps' or 'powdRafps' object
> ### Aliases: omit_std
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D rockjock_1 <- fps(lib = rockjock,
> ##D                   smpl = rockjock_mixtures$Mix1,
> ##D                   refs = c("ORDERED_MICROCLINE",
> ##D                            "LABRADORITE",
> ##D                            "KAOLINITE_DRY_BRANCH",
> ##D                            "MONTMORILLONITE_WYO",
> ##D                            "ILLITE_1M_RM30",
> ##D                            "CORUNDUM"),
> ##D                  std = "CORUNDUM",
> ##D                  align = 0.3,
> ##D                  std_conc = 20)
> ##D 
> ##D rockjock_1o <- omit_std(rockjock_1)
> ##D 
> ##D rockjock_a1 <- afps(lib = rockjock,
> ##D                     smpl = rockjock_mixtures$Mix1,
> ##D                     std = "CORUNDUM",
> ##D                     align = 0.3,
> ##D                     lod = 1,
> ##D                     std_conc = 20)
> ##D 
> ##D rockjock_a1o <- omit_std(rockjock_a1)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("omit_std", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("omit_std.powdRafps")
> ### * omit_std.powdRafps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: omit_std.powdRafps
> ### Title: Omit the internal standard from phase concentration data within
> ###   a 'powdRafps' object
> ### Aliases: omit_std.powdRafps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D rockjock_a1 <- afps(lib = rockjock,
> ##D                     smpl = rockjock_mixtures$Mix1,
> ##D                     std = "CORUNDUM",
> ##D                     align = 0.3,
> ##D                     lod = 1,
> ##D                     std_conc = 20)
> ##D 
> ##D rockjock_a1o <- omit_std(rockjock_a1)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("omit_std.powdRafps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("omit_std.powdRfps")
> ### * omit_std.powdRfps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: omit_std.powdRfps
> ### Title: Omit the internal standard from phase concentration data within
> ###   a 'powdRfps' object
> ### Aliases: omit_std.powdRfps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(rockjock)
> ##D data(rockjock_mixtures)
> ##D 
> ##D rockjock_1 <- fps(lib = rockjock,
> ##D                   smpl = rockjock_mixtures$Mix1,
> ##D                   refs = c("ORDERED_MICROCLINE",
> ##D                            "LABRADORITE",
> ##D                            "KAOLINITE_DRY_BRANCH",
> ##D                            "MONTMORILLONITE_WYO",
> ##D                            "ILLITE_1M_RM30",
> ##D                            "CORUNDUM"),
> ##D                  std = "CORUNDUM",
> ##D                  align = 0.3,
> ##D                  std_conc = 20)
> ##D 
> ##D rockjock_1o <- omit_std(rockjock_1)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("omit_std.powdRfps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.XY")
> ### * plot.XY
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.XY
> ### Title: Plotting an XY object
> ### Aliases: plot.XY
> 
> ### ** Examples
> 
> # Load the minerals library
> data(rockjock_mixtures)
> ## Not run: 
> ##D plot(rockjock_mixtures$Mix1, wavelength = "Cu")
> ##D plot(rockjock_mixtures$Mix1, wavelength = "Cu", interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.XY", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.multiXY")
> ### * plot.multiXY
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.multiXY
> ### Title: Plotting a multiXY object
> ### Aliases: plot.multiXY
> 
> ### ** Examples
> 
> # Load the minerals library
> data(rockjock_mixtures)
> ## Not run: 
> ##D plot(as_multi_xy(rockjock_mixtures), wavelength = "Cu")
> ##D plot(as_multi_xy(rockjock_mixtures), wavelength = "Cu", interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.multiXY", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.powdRafps")
> ### * plot.powdRafps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.powdRafps
> ### Title: Plotting elements of a powdRafps object
> ### Aliases: plot.powdRafps
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> # Load the soils data
> data(soils)
> 
> ## Not run: 
> ##D afps_sand <-  afps(lib = minerals,
> ##D                    smpl = soils$sandstone,
> ##D                    std = "QUA.1",
> ##D                    amorphous = "ORG",
> ##D                    align = 0.2,
> ##D                    lod = 0.1)
> ##D 
> ##D plot(afps_sand, wavelength = "Cu")
> ##D plot(afps_sand, wavelength = "Cu", interactive = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.powdRafps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.powdRbkg")
> ### * plot.powdRbkg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.powdRbkg
> ### Title: Plotting a powdRbkg object
> ### Aliases: plot.powdRbkg
> 
> ### ** Examples
> 
> # Load the minerals library
> data(minerals)
> 
> ## Not run: 
> ##D plot(minerals, interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.powdRbkg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.powdRfps")
> ### * plot.powdRfps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.powdRfps
> ### Title: Plotting elements of a powdRfps object
> ### Aliases: plot.powdRfps
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> # Load the soils data
> data(soils)
> 
> ## Not run: 
> ##D fps_sand <-  fps(lib = minerals,
> ##D                 smpl = soils$sandstone,
> ##D                 refs = minerals$phases$phase_id,
> ##D                 std = "QUA.1",
> ##D                 align = 0.2)
> ##D 
> ##D plot(fps_sand, wavelength = "Cu")
> ##D plot(fps_sand, wavelength = "Cu", interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.powdRfps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.powdRlib")
> ### * plot.powdRlib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.powdRlib
> ### Title: Plotting elements of a powdRlib object
> ### Aliases: plot.powdRlib
> 
> ### ** Examples
> 
> # Load the minerals library
> data(minerals)
> ## Not run: 
> ##D plot(minerals, wavelength = "Cu", refs = "ALB")
> ##D plot(minerals, wavelength = "Cu", refs = "ALB", interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.powdRlib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.powdRlm")
> ### * plot.powdRlm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.powdRlm
> ### Title: Plotting elements of a powdRlm object
> ### Aliases: plot.powdRlm
> 
> ### ** Examples
> 
> data(rockjock)
> data(rockjock_mixtures)
> 
> #Compute the PCA and loadings
> x1 <- xrpd_pca(rockjock_mixtures,
+                mean_center = TRUE,
+                bin_size = 1,
+                root_transform = 1)
> 
> ## Not run: 
> ##D fps_lm_out <- fps_lm(rockjock,
> ##D                      smpl = data.frame("x" = x1$loadings$tth,
> ##D                                        "y" = x1$loadings$Dim.1),
> ##D                      refs = rockjock$phases$phase_id,
> ##D                      std = "QUARTZ",
> ##D                      align = 0.3,
> ##D                      p = 0.01)
> ##D 
> ##D plot(fps_lm_out,
> ##D      wavelength = "Cu",
> ##D      interactive = TRUE,
> ##D      group = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.powdRlm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("powdRlib")
> ### * powdRlib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: powdRlib
> ### Title: Create an XRPD reference library
> ### Aliases: powdRlib
> 
> ### ** Examples
> 
> #load an example xrd_table
> data(minerals_xrd)
> #load an example phases_table
> data(minerals_phases)
> 
> #Create a reference library object
> xrd_lib <- powdRlib(xrd_table = minerals_xrd,
+                     phases_table = minerals_phases)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("powdRlib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("r")
> ### * r
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: r
> ### Title: Calculate the R value for a fitted pattern
> ### Aliases: r
> 
> ### ** Examples
> 
> # Load soils xrd data
> data(soils)
> 
> #Load minerals library
> data(minerals)
> 
> ## Not run: 
> ##D #Produce a fit
> ##D fps_sand <-  fps(lib = minerals,
> ##D                  smpl = soils$sandstone,
> ##D                  refs = minerals$phases$phase_id,
> ##D                  std = "QUA.1",
> ##D                  align = 0.2)
> ##D 
> ##D r(measured = fps_sand$measured,
> ##D   fitted = fps_sand$fitted)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("r", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read_xy")
> ### * read_xy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read_xy
> ### Title: Read ASCII XY data
> ### Aliases: read_xy
> 
> ### ** Examples
> 
> #load example XY file
> file <- system.file("extdata/D5000/xy/D5000_1.xy", package = "powdR")
> xy <- read_xy(file)
> 
> #Load multiple XY files
> files <- dir(system.file("extdata/D5000/xy", package = "powdR"),
+              full.names = TRUE)
> xy_list <- read_xy(files)
> 
> ## Not run: 
> ##D plot(xy_list, wavelength = "Cu")
> ##D plot(xy_list, wavelength = "Cu", interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read_xy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("regroup")
> ### * regroup
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: regroup
> ### Title: regroup
> ### Aliases: regroup
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> #Load the soils data
> data(soils)
> 
> #Load the regrouping structure
> data(minerals_regroup)
> 
> ## Not run: 
> ##D fps_sandstone <- fps(lib = minerals,
> ##D                      smpl = soils$sandstone,
> ##D                      refs = minerals$phases$phase_id,
> ##D                      std = "QUA.1",
> ##D                      align = 0.2)
> ##D 
> ##D fps_sandstone_regrouped <- regroup(fps_sandstone,
> ##D                                    minerals_regroup)
> ##D 
> ##D fps_sandstone_regrouped$phases_grouped
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("regroup", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("regroup.powdRafps")
> ### * regroup.powdRafps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: regroup.powdRafps
> ### Title: regroup
> ### Aliases: regroup.powdRafps
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> # Load the soils data
> data(soils)
> 
> #Load the regrouping structure
> data(minerals_regroup)
> 
> ## Not run: 
> ##D afps_sandstone <- afps(lib = minerals,
> ##D                        smpl = soils$sandstone,
> ##D                        std = "QUA.2",
> ##D                        align = 0.2,
> ##D                        lod = 0.2,
> ##D                        amorphous = "ORG",
> ##D                        amorphous_lod = 1)
> ##D 
> ##D afps_sandstone_regrouped <- regroup(afps_sandstone,
> ##D                                     minerals_regroup)
> ##D 
> ##D afps_sandstone_regrouped$phases_grouped
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("regroup.powdRafps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("regroup.powdRfps")
> ### * regroup.powdRfps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: regroup.powdRfps
> ### Title: regroup
> ### Aliases: regroup.powdRfps
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> #Load the soils data
> data(soils)
> 
> #Load the regrouping structure
> data(minerals_regroup)
> 
> ## Not run: 
> ##D fps_sandstone <- fps(lib = minerals,
> ##D                      smpl = soils$sandstone,
> ##D                      refs = minerals$phases$phase_id,
> ##D                      std = "QUA.1",
> ##D                      align = 0.2)
> ##D 
> ##D fps_sandstone_regrouped <- regroup(fps_sandstone,
> ##D                                    minerals_regroup)
> ##D 
> ##D fps_sandstone_regrouped$phases_grouped
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("regroup.powdRfps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("run_bkg")
> ### * run_bkg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: run_bkg
> ### Title: Run the background fitting shiny app
> ### Aliases: run_bkg
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D run_powdR()
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("run_bkg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("run_powdR")
> ### * run_powdR
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: run_powdR
> ### Title: Run the powdR shiny app
> ### Aliases: run_powdR
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D run_powdR()
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("run_powdR", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rwp")
> ### * rwp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rwp
> ### Title: Calculate the Rwp value for a fitted pattern
> ### Aliases: rwp
> 
> ### ** Examples
> 
> # Load soils xrd data
> data(soils)
> 
> #Load minerals library
> data(minerals)
> 
> ## Not run: 
> ##D #Produce a fit
> ##D fps_sand <-  fps(lib = minerals,
> ##D                  smpl = soils$sandstone,
> ##D                  refs = minerals$phases$phase_id,
> ##D                  std = "QUA.1",
> ##D                  align = 0.2)
> ##D 
> ##D rwp(measured = fps_sand$measured,
> ##D     fitted = fps_sand$fitted)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rwp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("subset.powdRlib")
> ### * subset.powdRlib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: subset.powdRlib
> ### Title: Subset a powdRlib object
> ### Aliases: subset.powdRlib
> 
> ### ** Examples
> 
> #Load the minerals library
> data(minerals)
> 
> minerals_keep <- subset(minerals,
+                         refs = c("QUA.1", "QUA.2"),
+                         mode = "keep")
> 
> minerals_remove <- subset(minerals,
+                           refs = c("QUA.1", "QUA.2"),
+                           mode = "remove")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("subset.powdRlib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summarise_mineralogy")
> ### * summarise_mineralogy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summarise_mineralogy
> ### Title: Summarise the mineralogy from multiple powdRfps and powdRafps
> ###   outputs
> ### Aliases: summarise_mineralogy
> 
> ### ** Examples
> 
> data(minerals)
> data(soils)
> 
> ## Not run: 
> ##D multiple_afps <- lapply(soils, afps,
> ##D                         lib = minerals,
> ##D                         std = "QUA.1",
> ##D                         align = 0.2,
> ##D                         lod = 0.1,
> ##D                         amorphous = "ORG",
> ##D                         amorphous_lod = 1)
> ##D 
> ##D sm1 <- summarise_mineralogy(multiple_afps,
> ##D                             type = "all",
> ##D                             order = TRUE)
> ##D 
> ##D sm2 <- summarise_mineralogy(multiple_afps,
> ##D                             type = "grouped",
> ##D                             order = TRUE)
> ##D 
> ##D sm3 <- summarise_mineralogy(multiple_afps,
> ##D                             type = "grouped",
> ##D                             order = TRUE,
> ##D                             rwp = TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summarise_mineralogy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tth_transform")
> ### * tth_transform
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tth_transform
> ### Title: Transform a two theta axis between wavelengths
> ### Aliases: tth_transform
> 
> ### ** Examples
> 
> data(soils)
> sandstone2 <- soils$sandstone
> 
> #Convert from Cu (1.54056 Angstroms) to Co (1.78897 Angstroms)
> sandstone2$tth <- tth_transform(sandstone2$tth,
+                                 from = 1.54056,
+                                 to = 1.78897)
> 
> sandstone_list <- as_multi_xy(list("sandstone" = soils$sandstone,
+                                    "sandstone2" = sandstone2))
> #plot the change
> plot(sandstone_list, wavelength = "Cu")
> 
> #Alternatively convert the 2theta axis of a library
> data(minerals)
> 
> minerals2 <- minerals
> minerals2$tth <- tth_transform(minerals2$tth,
+                                 from = 1.54056,
+                                 to = 1.78897)
> 
> #Plot the difference
> plot(x = minerals$tth, y = minerals$xrd$QUA.1,
+      type = "l", xlim = c(0, 85))
> lines(x = minerals2$tth, y = minerals2$xrd$QUA.1,
+       col = "red")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tth_transform", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("xrpd_pca")
> ### * xrpd_pca
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: xrpd_pca
> ### Title: PCA of XRPD data
> ### Aliases: xrpd_pca
> 
> ### ** Examples
> 
> data(rockjock_mixtures)
> 
> x1 <- xrpd_pca(rockjock_mixtures,
+                mean_center = TRUE,
+                bin_size = 1,
+                root_transform = 1)
> 
> #Plot the loading of dimension 1
> 
> plot(x = x1$loadings$tth,
+      y = x1$loadings$Dim.1,
+      type = "l")
> 
> ## Not run: 
> ##D #Fit loading 1 to the rockjock library
> ##D f1 <- fps_lm(rockjock,
> ##D              smpl = data.frame("tth" = x1$loadings$tth,
> ##D                                "counts" = x1$loadings$Dim.1),
> ##D              refs = rockjock$phases$phase_id,
> ##D              std = "QUARTZ",
> ##D              align = 0,
> ##D              p = 0.05)
> ##D 
> ##D plot(f1, wavelength = "Cu", interactive = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("xrpd_pca", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.749 0.176 1.969 0.003 0.004 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
