
R Under development (unstable) (2023-01-03 r83550) -- "Unsuffered Consequences"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gamma"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "gamma-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('gamma')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AIX_NaI_1")
> ### * AIX_NaI_1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: AIX_NaI_1
> ### Title: CEREGE Calibration Curve (NaI)
> ### Aliases: AIX_NaI_1
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Load the curve
> utils::data(AIX_NaI_1, package = "gamma")
> plot(AIX_NaI_1)
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("AIX_NaI_1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BDX_LaBr_1")
> ### * BDX_LaBr_1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BDX_LaBr_1
> ### Title: CRP2A Calibration Curve (LaBr)
> ### Aliases: BDX_LaBr_1
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Load the curve
> utils::data(BDX_LaBr_1, package = "gamma")
> plot(BDX_LaBr_1)
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BDX_LaBr_1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Baseline-class")
> ### * Baseline-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Baseline-class
> ### Title: An S4 Class to Represent a Spectrum Baseline
> ### Aliases: Baseline-class .Baseline BaseLine-class
> 
> ### ** Examples
> 
> ## Import a CNF file
> spc_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> spc <- read(spc_file)
> 
> ## Remove the first 35 channels
> spc <- signal_slice(spc, -c(1:35))
> 
> ## Linear baseline
> bsl_linear <- baseline_linear(spc, from = 250, to = 750)
> plot(spc, bsl_linear)
> 
> ## SNIP baseline
> bsl_snip <- baseline_snip(spc, LLS = FALSE, decreasing = FALSE, n = 100)
> plot(spc, bsl_snip)
> 
> ## Rubberband baseline
> bsl_rubber <- baseline_rubberband(spc)
> plot(spc, bsl_rubber)
> 
> ## Remove baseline
> spc_clean1 <- signal_correct(spc)
> spc_clean2 <- spc - bsl_snip
> all(spc_clean1 == spc_clean2)
[1] TRUE
> 
> plot(spc_clean1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Baseline-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GammaSpectra-class")
> ### * GammaSpectra-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GammaSpectra-class
> ### Title: An S4 Class to Represent a Collection of Gamma Sectra
> ### Aliases: GammaSpectra-class .GammaSpectra
> 
> ### ** Examples
> 
> ## Import all CNF files in a given directory
> spc_dir <- system.file("extdata/BDX_LaBr_1/calibration", package = "gamma")
> (spc <- read(spc_dir))
A collection of 7 gamma spectra: BRIQUE, C341, C347, GOU, LMP, MAZ, PEP
> 
> ## Access
> get_hash(spc)
                            BRIQUE                               C341 
"1ecdbddaaee7354b19082631943927b4" "02c49b9e0a7c2f7e9441e0cc3a84f80a" 
                              C347                                GOU 
"09cfc2439cec1da653fea6e8669e2024" "04ee6c79a025c22e99237b45f2b02891" 
                               LMP                                MAZ 
"00032c2568e676366fa6c7a3ad642cef" "97c207f151ebefbfb48d5851aecbe931" 
                               PEP 
"71a3b09a7cc55c07d8d07b55e2b50e4f" 
> get_names(spc)
  BRIQUE     C341     C347      GOU      LMP      MAZ      PEP 
"BRIQUE"   "C341"   "C347"    "GOU"    "LMP"    "MAZ"    "PEP" 
> get_livetime(spc)
 BRIQUE    C341    C347     GOU     LMP     MAZ     PEP 
8473.45  976.08  703.92 1008.58  908.20  965.86  507.07 
> get_realtime(spc)
 BRIQUE    C341    C347     GOU     LMP     MAZ     PEP 
8501.68  978.36  705.96 1011.56  910.17  968.34  508.96 
> 
> lengths(spc)
BRIQUE   C341   C347    GOU    LMP    MAZ    PEP 
  1024   1024   1024   1024   1024   1024   1024 
> range_energy(spc)
             min      max
BRIQUE  3.827601 3243.211
C341    8.993622 3278.179
C347    9.836247 3291.249
GOU     7.911910 3244.377
LMP    10.928446 3273.935
MAZ     9.277458 3248.528
PEP     7.349223 3252.673
> 
> ## Subset
> spc[] # All spectra
A collection of 7 gamma spectra: BRIQUE, C341, C347, GOU, LMP, MAZ, PEP
> spc[NULL] # All spectra
A collection of 7 gamma spectra: BRIQUE, C341, C347, GOU, LMP, MAZ, PEP
> spc[1] # The first spectrum
A collection of 1 gamma spectrum: BRIQUE
> spc[-6] # Delete the sixth spectrum
A collection of 6 gamma spectra: BRIQUE, C341, C347, GOU, LMP, PEP
> spc[1:3] # The first three spectra
A collection of 3 gamma spectra: BRIQUE, C341, C347
> spc[c(1, 3)] # The first and third spectra
A collection of 2 gamma spectra: BRIQUE, C347
> spc["BRIQUE"] # The spectrum named 'BRIQUE'
A collection of 1 gamma spectrum: BRIQUE
> spc[c("BRIQUE", "C347")] # The spectra named 'BRIQUE' and 'C347'
A collection of 2 gamma spectra: BRIQUE, C347
> spc[1:3, "energy"] # The slot 'energy' of the first three spectra
$BRIQUE
   [1]    3.827601    6.946445   10.065383   13.184414   16.303538   19.422755
   [7]   22.542066   25.661471   28.780968   31.900559   35.020244   38.140021
  [13]   41.259893   44.379857   47.499915   50.620066   53.740311   56.860649
  [19]   59.981080   63.101605   66.222223   69.342934   72.463739   75.584637
  [25]   78.705628   81.826713   84.947891   88.069163   91.190528   94.311986
  [31]   97.433538  100.555183  103.676921  106.798753  109.920678  113.042697
  [37]  116.164808  119.287014  122.409312  125.531704  128.654189  131.776768
  [43]  134.899440  138.022205  141.145064  144.268016  147.391062  150.514200
  [49]  153.637433  156.760758  159.884177  163.007689  166.131295  169.254994
  [55]  172.378786  175.502672  178.626651  181.750724  184.874889  187.999149
  [61]  191.123501  194.247947  197.372486  200.497119  203.621845  206.746664
  [67]  209.871577  212.996583  216.121683  219.246875  222.372162  225.497541
  [73]  228.623014  231.748580  234.874240  237.999993  241.125839  244.251779
  [79]  247.377812  250.503938  253.630158  256.756471  259.882878  263.009378
  [85]  266.135971  269.262658  272.389438  275.516311  278.643278  281.770338
  [91]  284.897491  288.024738  291.152078  294.279512  297.407039  300.534659
  [97]  303.662372  306.790179  309.918080  313.046073  316.174161  319.302341
 [103]  322.430615  325.558982  328.687442  331.815996  334.944644  338.073384
 [109]  341.202218  344.331145  347.460166  350.589280  353.718488  356.847788
 [115]  359.977183  363.106670  366.236251  369.365925  372.495693  375.625554
 [121]  378.755508  381.885556  385.015697  388.145931  391.276259  394.406680
 [127]  397.537195  400.667802  403.798504  406.929298  410.060186  413.191168
 [133]  416.322242  419.453410  422.584672  425.716026  428.847475  431.979016
 [139]  435.110651  438.242379  441.374201  444.506116  447.638124  450.770226
 [145]  453.902421  457.034709  460.167091  463.299566  466.432134  469.564796
 [151]  472.697552  475.830400  478.963342  482.096377  485.229506  488.362728
 [157]  491.496043  494.629452  497.762954  500.896550  504.030239  507.164021
 [163]  510.297896  513.431865  516.565928  519.700083  522.834332  525.968675
 [169]  529.103110  532.237640  535.372262  538.506978  541.641787  544.776690
 [175]  547.911686  551.046775  554.181957  557.317233  560.452603  563.588066
 [181]  566.723622  569.859271  572.995014  576.130850  579.266780  582.402803
 [187]  585.538919  588.675129  591.811432  594.947828  598.084318  601.220901
 [193]  604.357577  607.494347  610.631210  613.768167  616.905217  620.042360
 [199]  623.179597  626.316927  629.454350  632.591867  635.729477  638.867180
 [205]  642.004977  645.142867  648.280851  651.418928  654.557098  657.695362
 [211]  660.833719  663.972169  667.110713  670.249350  673.388080  676.526904
 [217]  679.665821  682.804832  685.943936  689.083133  692.222424  695.361807
 [223]  698.501285  701.640856  704.780520  707.920277  711.060128  714.200072
 [229]  717.340110  720.480240  723.620465  726.760782  729.901193  733.041698
 [235]  736.182295  739.322986  742.463771  745.604649  748.745620  751.886684
 [241]  755.027842  758.169093  761.310438  764.451876  767.593407  770.735032
 [247]  773.876750  777.018562  780.160466  783.302465  786.444556  789.586741
 [253]  792.729019  795.871391  799.013856  802.156414  805.299066  808.441811
 [259]  811.584649  814.727581  817.870606  821.013725  824.156936  827.300242
 [265]  830.443640  833.587132  836.730718  839.874396  843.018168  846.162034
 [271]  849.305993  852.450045  855.594190  858.738429  861.882761  865.027187
 [277]  868.171706  871.316318  874.461024  877.605823  880.750715  883.895701
 [283]  887.040780  890.185953  893.331218  896.476578  899.622030  902.767576
 [289]  905.913216  909.058948  912.204774  915.350694  918.496706  921.642813
 [295]  924.789012  927.935305  931.081691  934.228171  937.374744  940.521410
 [301]  943.668170  946.815023  949.961969  953.109009  956.256142  959.403368
 [307]  962.550688  965.698101  968.845608  971.993208  975.140901  978.288688
 [313]  981.436568  984.584541  987.732608  990.880768  994.029022  997.177368
 [319] 1000.325809 1003.474342 1006.622969 1009.771689 1012.920503 1016.069410
 [325] 1019.218410 1022.367504 1025.516691 1028.665972 1031.815346 1034.964813
 [331] 1038.114373 1041.264027 1044.413774 1047.563615 1050.713549 1053.863576
 [337] 1057.013697 1060.163911 1063.314219 1066.464620 1069.615114 1072.765701
 [343] 1075.916382 1079.067157 1082.218024 1085.368985 1088.520040 1091.671187
 [349] 1094.822428 1097.973763 1101.125191 1104.276712 1107.428326 1110.580034
 [355] 1113.731835 1116.883730 1120.035718 1123.187799 1126.339974 1129.492242
 [361] 1132.644604 1135.797059 1138.949607 1142.102248 1145.254983 1148.407811
 [367] 1151.560733 1154.713748 1157.866856 1161.020058 1164.173353 1167.326742
 [373] 1170.480223 1173.633799 1176.787467 1179.941229 1183.095084 1186.249033
 [379] 1189.403075 1192.557210 1195.711439 1198.865761 1202.020176 1205.174685
 [385] 1208.329287 1211.483983 1214.638772 1217.793654 1220.948630 1224.103699
 [391] 1227.258861 1230.414117 1233.569466 1236.724908 1239.880444 1243.036073
 [397] 1246.191795 1249.347611 1252.503521 1255.659523 1258.815619 1261.971808
 [403] 1265.128091 1268.284467 1271.440937 1274.597499 1277.754156 1280.910905
 [409] 1284.067748 1287.224684 1290.381714 1293.538837 1296.696053 1299.853363
 [415] 1303.010766 1306.168262 1309.325852 1312.483535 1315.641312 1318.799181
 [421] 1321.957145 1325.115201 1328.273351 1331.431595 1334.589931 1337.748361
 [427] 1340.906885 1344.065501 1347.224212 1350.383015 1353.541912 1356.700902
 [433] 1359.859986 1363.019163 1366.178433 1369.337797 1372.497254 1375.656804
 [439] 1378.816448 1381.976185 1385.136015 1388.295939 1391.455956 1394.616067
 [445] 1397.776271 1400.936568 1404.096959 1407.257443 1410.418020 1413.578691
 [451] 1416.739455 1419.900313 1423.061264 1426.222308 1429.383445 1432.544676
 [457] 1435.706001 1438.867418 1442.028929 1445.190534 1448.352231 1451.514022
 [463] 1454.675907 1457.837885 1460.999956 1464.162121 1467.324378 1470.486730
 [469] 1473.649174 1476.811712 1479.974344 1483.137069 1486.299887 1489.462798
 [475] 1492.625803 1495.788901 1498.952093 1502.115378 1505.278756 1508.442227
 [481] 1511.605792 1514.769451 1517.933203 1521.097048 1524.260986 1527.425018
 [487] 1530.589143 1533.753362 1536.917674 1540.082079 1543.246578 1546.411170
 [493] 1549.575855 1552.740634 1555.905506 1559.070471 1562.235530 1565.400682
 [499] 1568.565928 1571.731267 1574.896699 1578.062224 1581.227843 1584.393556
 [505] 1587.559362 1590.725261 1593.891253 1597.057339 1600.223518 1603.389791
 [511] 1606.556156 1609.722616 1612.889168 1616.055814 1619.222554 1622.389386
 [517] 1625.556312 1628.723332 1631.890445 1635.057651 1638.224950 1641.392343
 [523] 1644.559830 1647.727409 1650.895082 1654.062848 1657.230708 1660.398661
 [529] 1663.566708 1666.734847 1669.903081 1673.071407 1676.239827 1679.408340
 [535] 1682.576947 1685.745647 1688.914440 1692.083327 1695.252307 1698.421380
 [541] 1701.590547 1704.759807 1707.929161 1711.098608 1714.268148 1717.437782
 [547] 1720.607508 1723.777329 1726.947242 1730.117250 1733.287350 1736.457544
 [553] 1739.627831 1742.798211 1745.968685 1749.139252 1752.309913 1755.480667
 [559] 1758.651514 1761.822455 1764.993489 1768.164616 1771.335837 1774.507151
 [565] 1777.678559 1780.850060 1784.021654 1787.193342 1790.365123 1793.536997
 [571] 1796.708965 1799.881026 1803.053180 1806.225428 1809.397769 1812.570203
 [577] 1815.742731 1818.915352 1822.088067 1825.260875 1828.433776 1831.606771
 [583] 1834.779859 1837.953040 1841.126315 1844.299683 1847.473145 1850.646700
 [589] 1853.820348 1856.994089 1860.167924 1863.341853 1866.515874 1869.689989
 [595] 1872.864198 1876.038499 1879.212895 1882.387383 1885.561965 1888.736640
 [601] 1891.911409 1895.086271 1898.261226 1901.436274 1904.611416 1907.786652
 [607] 1910.961981 1914.137403 1917.312918 1920.488527 1923.664229 1926.840025
 [613] 1930.015914 1933.191896 1936.367972 1939.544141 1942.720403 1945.896759
 [619] 1949.073208 1952.249750 1955.426386 1958.603115 1961.779938 1964.956854
 [625] 1968.133863 1971.310966 1974.488162 1977.665451 1980.842834 1984.020310
 [631] 1987.197879 1990.375542 1993.553298 1996.731148 1999.909091 2003.087127
 [637] 2006.265257 2009.443480 2012.621796 2015.800206 2018.978709 2022.157305
 [643] 2025.335995 2028.514778 2031.693655 2034.872625 2038.051688 2041.230845
 [649] 2044.410095 2047.589438 2050.768875 2053.948405 2057.128028 2060.307745
 [655] 2063.487555 2066.667459 2069.847456 2073.027546 2076.207730 2079.388007
 [661] 2082.568377 2085.748841 2088.929398 2092.110048 2095.290792 2098.471629
 [667] 2101.652560 2104.833583 2108.014701 2111.195911 2114.377215 2117.558613
 [673] 2120.740103 2123.921687 2127.103365 2130.285136 2133.467000 2136.648957
 [679] 2139.831008 2143.013152 2146.195390 2149.377721 2152.560145 2155.742663
 [685] 2158.925274 2162.107979 2165.290776 2168.473667 2171.656652 2174.839730
 [691] 2178.022901 2181.206166 2184.389524 2187.572975 2190.756520 2193.940158
 [697] 2197.123889 2200.307714 2203.491632 2206.675644 2209.859748 2213.043947
 [703] 2216.228238 2219.412623 2222.597102 2225.781673 2228.966338 2232.151097
 [709] 2235.335948 2238.520894 2241.705932 2244.891064 2248.076289 2251.261608
 [715] 2254.447020 2257.632525 2260.818124 2264.003816 2267.189601 2270.375480
 [721] 2273.561452 2276.747517 2279.933676 2283.119929 2286.306274 2289.492713
 [727] 2292.679245 2295.865871 2299.052590 2302.239402 2305.426308 2308.613307
 [733] 2311.800400 2314.987586 2318.174865 2321.362237 2324.549703 2327.737263
 [739] 2330.924915 2334.112661 2337.300501 2340.488434 2343.676460 2346.864579
 [745] 2350.052792 2353.241098 2356.429498 2359.617991 2362.806577 2365.995257
 [751] 2369.184030 2372.372896 2375.561856 2378.750909 2381.940055 2385.129295
 [757] 2388.318628 2391.508055 2394.697575 2397.887188 2401.076895 2404.266695
 [763] 2407.456588 2410.646575 2413.836655 2417.026828 2420.217095 2423.407455
 [769] 2426.597909 2429.788456 2432.979096 2436.169830 2439.360657 2442.551577
 [775] 2445.742591 2448.933698 2452.124898 2455.316192 2458.507579 2461.699060
 [781] 2464.890634 2468.082301 2471.274062 2474.465916 2477.657863 2480.849904
 [787] 2484.042038 2487.234265 2490.426586 2493.619000 2496.811508 2500.004109
 [793] 2503.196803 2506.389591 2509.582472 2512.775446 2515.968514 2519.161675
 [799] 2522.354929 2525.548277 2528.741718 2531.935253 2535.128881 2538.322602
 [805] 2541.516417 2544.710325 2547.904326 2551.098421 2554.292609 2557.486890
 [811] 2560.681265 2563.875733 2567.070295 2570.264950 2573.459698 2576.654539
 [817] 2579.849474 2583.044503 2586.239624 2589.434839 2592.630148 2595.825550
 [823] 2599.021045 2602.216633 2605.412315 2608.608090 2611.803959 2614.999921
 [829] 2618.195976 2621.392125 2624.588367 2627.784703 2630.981131 2634.177654
 [835] 2637.374269 2640.570978 2643.767780 2646.964676 2650.161665 2653.358747
 [841] 2656.555923 2659.753192 2662.950554 2666.148010 2669.345559 2672.543202
 [847] 2675.740937 2678.938767 2682.136689 2685.334705 2688.532815 2691.731017
 [853] 2694.929313 2698.127703 2701.326185 2704.524762 2707.723431 2710.922194
 [859] 2714.121050 2717.320000 2720.519043 2723.718179 2726.917409 2730.116732
 [865] 2733.316148 2736.515658 2739.715261 2742.914957 2746.114747 2749.314631
 [871] 2752.514607 2755.714677 2758.914840 2762.115097 2765.315447 2768.515890
 [877] 2771.716427 2774.917057 2778.117781 2781.318598 2784.519508 2787.720511
 [883] 2790.921608 2794.122799 2797.324082 2800.525459 2803.726930 2806.928494
 [889] 2810.130151 2813.331901 2816.533745 2819.735682 2822.937713 2826.139837
 [895] 2829.342054 2832.544365 2835.746769 2838.949266 2842.151857 2845.354541
 [901] 2848.557318 2851.760189 2854.963153 2858.166211 2861.369362 2864.572606
 [907] 2867.775944 2870.979375 2874.182899 2877.386517 2880.590228 2883.794032
 [913] 2886.997930 2890.201921 2893.406006 2896.610184 2899.814455 2903.018820
 [919] 2906.223278 2909.427829 2912.632474 2915.837212 2919.042043 2922.246968
 [925] 2925.451986 2928.657098 2931.862303 2935.067601 2938.272993 2941.478478
 [931] 2944.684056 2947.889728 2951.095493 2954.301351 2957.507303 2960.713348
 [937] 2963.919487 2967.125719 2970.332044 2973.538463 2976.744975 2979.951580
 [943] 2983.158279 2986.365071 2989.571956 2992.778935 2995.986007 2999.193173
 [949] 3002.400432 3005.607784 3008.815230 3012.022769 3015.230401 3018.438127
 [955] 3021.645946 3024.853858 3028.061864 3031.269963 3034.478156 3037.686441
 [961] 3040.894821 3044.103293 3047.311859 3050.520519 3053.729271 3056.938117
 [967] 3060.147057 3063.356090 3066.565216 3069.774435 3072.983748 3076.193154
 [973] 3079.402654 3082.612247 3085.821933 3089.031713 3092.241586 3095.451552
 [979] 3098.661612 3101.871765 3105.082012 3108.292352 3111.502785 3114.713312
 [985] 3117.923932 3121.134645 3124.345452 3127.556352 3130.767345 3133.978432
 [991] 3137.189612 3140.400885 3143.612252 3146.823713 3150.035266 3153.246913
 [997] 3156.458653 3159.670487 3162.882414 3166.094435 3169.306548 3172.518755
[1003] 3175.731056 3178.943450 3182.155937 3185.368518 3188.581192 3191.793959
[1009] 3195.006820 3198.219774 3201.432821 3204.645962 3207.859196 3211.072523
[1015] 3214.285944 3217.499458 3220.713066 3223.926767 3227.140561 3230.354449
[1021] 3233.568430 3236.782504 3239.996672 3243.210933

$C341
   [1]    8.993622   12.080533   15.167658   18.254995   21.342544   24.430307
   [7]   27.518283   30.606471   33.694872   36.783487   39.872314   42.961354
  [13]   46.050606   49.140072   52.229750   55.319642   58.409746   61.500063
  [19]   64.590593   67.681336   70.772291   73.863460   76.954841   80.046436
  [25]   83.138243   86.230263   89.322496   92.414941   95.507600   98.600471
  [31]  101.693556  104.786853  107.880363  110.974086  114.068022  117.162170
  [37]  120.256532  123.351106  126.445893  129.540894  132.636107  135.731532
  [43]  138.827171  141.923023  145.019087  148.115364  151.211854  154.308557
  [49]  157.405473  160.502602  163.599944  166.697498  169.795266  172.893246
  [55]  175.991439  179.089845  182.188464  185.287295  188.386340  191.485597
  [61]  194.585067  197.684750  200.784646  203.884755  206.985077  210.085612
  [67]  213.186359  216.287319  219.388492  222.489878  225.591477  228.693289
  [73]  231.795314  234.897551  238.000002  241.102665  244.205541  247.308630
  [79]  250.411932  253.515446  256.619174  259.723114  262.827267  265.931634
  [85]  269.036213  272.141004  275.246009  278.351227  281.456657  284.562301
  [91]  287.668157  290.774226  293.880508  296.987002  300.093710  303.200631
  [97]  306.307764  309.415110  312.522669  315.630441  318.738426  321.846624
 [103]  324.955034  328.063658  331.172494  334.281543  337.390805  340.500280
 [109]  343.609968  346.719868  349.829982  352.940308  356.050847  359.161599
 [115]  362.272564  365.383742  368.495133  371.606736  374.718553  377.830582
 [121]  380.942824  384.055279  387.167947  390.280828  393.393921  396.507227
 [127]  399.620747  402.734479  405.848424  408.962582  412.076953  415.191536
 [133]  418.306333  421.421342  424.536564  427.651999  430.767647  433.883508
 [139]  436.999582  440.115868  443.232368  446.349080  449.466005  452.583143
 [145]  455.700494  458.818058  461.935834  465.053824  468.172026  471.290441
 [151]  474.409069  477.527910  480.646964  483.766230  486.885710  490.005402
 [157]  493.125308  496.245426  499.365757  502.486300  505.607057  508.728027
 [163]  511.849209  514.970604  518.092212  521.214033  524.336067  527.458314
 [169]  530.580774  533.703446  536.826331  539.949430  543.072741  546.196265
 [175]  549.320001  552.443951  555.568113  558.692489  561.817077  564.941878
 [181]  568.066892  571.192119  574.317559  577.443211  580.569077  583.695155
 [187]  586.821446  589.947950  593.074667  596.201597  599.328739  602.456095
 [193]  605.583663  608.711444  611.839438  614.967645  618.096065  621.224698
 [199]  624.353543  627.482602  630.611873  633.741357  636.871054  640.000964
 [205]  643.131087  646.261422  649.391971  652.522732  655.653706  658.784893
 [211]  661.916293  665.047906  668.179731  671.311770  674.444021  677.576486
 [217]  680.709163  683.842053  686.975155  690.108471  693.242000  696.375741
 [223]  699.509695  702.643862  705.778242  708.912835  712.047641  715.182660
 [229]  718.317891  721.453335  724.588993  727.724863  730.860945  733.997241
 [235]  737.133750  740.270471  743.407406  746.544553  749.681913  752.819486
 [241]  755.957272  759.095271  762.233482  765.371907  768.510544  771.649394
 [247]  774.788457  777.927733  781.067222  784.206923  787.346838  790.486965
 [253]  793.627305  796.767858  799.908624  803.049603  806.190795  809.332199
 [259]  812.473817  815.615647  818.757690  821.899946  825.042415  828.185096
 [265]  831.327991  834.471098  837.614419  840.757952  843.901698  847.045657
 [271]  850.189829  853.334213  856.478811  859.623621  862.768644  865.913880
 [277]  869.059329  872.204991  875.350866  878.496953  881.643254  884.789767
 [283]  887.936493  891.083432  894.230584  897.377949  900.525526  903.673317
 [289]  906.821320  909.969536  913.117965  916.266607  919.415462  922.564529
 [295]  925.713810  928.863303  932.013010  935.162929  938.313061  941.463405
 [301]  944.613963  947.764734  950.915717  954.066913  957.218322  960.369944
 [307]  963.521779  966.673827  969.826088  972.978561  976.131247  979.284147
 [313]  982.437259  985.590584  988.744121  991.897872  995.051836  998.206012
 [319] 1001.360401 1004.515003 1007.669818 1010.824846 1013.980087 1017.135540
 [325] 1020.291207 1023.447086 1026.603178 1029.759483 1032.916001 1036.072732
 [331] 1039.229676 1042.386832 1045.544201 1048.701784 1051.859579 1055.017587
 [337] 1058.175807 1061.334241 1064.492888 1067.651747 1070.810819 1073.970104
 [343] 1077.129602 1080.289313 1083.449237 1086.609373 1089.769723 1092.930285
 [349] 1096.091060 1099.252048 1102.413249 1105.574663 1108.736290 1111.898129
 [355] 1115.060182 1118.222447 1121.384925 1124.547616 1127.710520 1130.873636
 [361] 1134.036966 1137.200508 1140.364264 1143.528232 1146.692413 1149.856807
 [367] 1153.021413 1156.186233 1159.351265 1162.516511 1165.681969 1168.847640
 [373] 1172.013524 1175.179621 1178.345930 1181.512453 1184.679188 1187.846136
 [379] 1191.013297 1194.180671 1197.348258 1200.516058 1203.684070 1206.852296
 [385] 1210.020734 1213.189385 1216.358249 1219.527326 1222.696616 1225.866119
 [391] 1229.035834 1232.205762 1235.375904 1238.546258 1241.716825 1244.887604
 [397] 1248.058597 1251.229803 1254.401221 1257.572852 1260.744696 1263.916753
 [403] 1267.089023 1270.261506 1273.434201 1276.607110 1279.780231 1282.953565
 [409] 1286.127112 1289.300872 1292.474845 1295.649031 1298.823429 1301.998040
 [415] 1305.172865 1308.347902 1311.523152 1314.698614 1317.874290 1321.050179
 [421] 1324.226280 1327.402594 1330.579121 1333.755861 1336.932814 1340.109980
 [427] 1343.287359 1346.464950 1349.642754 1352.820772 1355.999002 1359.177445
 [433] 1362.356100 1365.534969 1368.714050 1371.893345 1375.072852 1378.252572
 [439] 1381.432505 1384.612651 1387.793010 1390.973581 1394.154366 1397.335363
 [445] 1400.516573 1403.697996 1406.879632 1410.061481 1413.243542 1416.425817
 [451] 1419.608304 1422.791004 1425.973917 1429.157043 1432.340382 1435.523934
 [457] 1438.707698 1441.891676 1445.075866 1448.260269 1451.444885 1454.629714
 [463] 1457.814755 1461.000010 1464.185477 1467.371158 1470.557051 1473.743157
 [469] 1476.929476 1480.116008 1483.302752 1486.489710 1489.676880 1492.864263
 [475] 1496.051859 1499.239668 1502.427690 1505.615925 1508.804372 1511.993033
 [481] 1515.181906 1518.370992 1521.560291 1524.749803 1527.939528 1531.129465
 [487] 1534.319616 1537.509979 1540.700555 1543.891344 1547.082346 1550.273561
 [493] 1553.464988 1556.656629 1559.848482 1563.040548 1566.232828 1569.425320
 [499] 1572.618024 1575.810942 1579.004073 1582.197416 1585.390972 1588.584741
 [505] 1591.778723 1594.972918 1598.167326 1601.361947 1604.556780 1607.751826
 [511] 1610.947086 1614.142558 1617.338243 1620.534140 1623.730251 1626.926574
 [517] 1630.123111 1633.319860 1636.516822 1639.713997 1642.911385 1646.108986
 [523] 1649.306799 1652.504826 1655.703065 1658.901517 1662.100182 1665.299060
 [529] 1668.498151 1671.697454 1674.896971 1678.096700 1681.296642 1684.496797
 [535] 1687.697165 1690.897746 1694.098540 1697.299546 1700.500766 1703.702198
 [541] 1706.903843 1710.105701 1713.307772 1716.510056 1719.712552 1722.915262
 [547] 1726.118184 1729.321319 1732.524667 1735.728228 1738.932002 1742.135988
 [553] 1745.340188 1748.544600 1751.749226 1754.954064 1758.159115 1761.364378
 [559] 1764.569855 1767.775545 1770.981447 1774.187562 1777.393890 1780.600431
 [565] 1783.807185 1787.014152 1790.221332 1793.428724 1796.636329 1799.844148
 [571] 1803.052179 1806.260423 1809.468879 1812.677549 1815.886431 1819.095527
 [577] 1822.304835 1825.514356 1828.724090 1831.934037 1835.144197 1838.354569
 [583] 1841.565155 1844.775953 1847.986964 1851.198188 1854.409625 1857.621275
 [589] 1860.833137 1864.045213 1867.257501 1870.470002 1873.682716 1876.895643
 [595] 1880.108783 1883.322136 1886.535701 1889.749480 1892.963471 1896.177675
 [601] 1899.392092 1902.606722 1905.821564 1909.036620 1912.251889 1915.467370
 [607] 1918.683064 1921.898971 1925.115091 1928.331424 1931.547969 1934.764728
 [613] 1937.981699 1941.198883 1944.416280 1947.633890 1950.851713 1954.069749
 [619] 1957.287997 1960.506459 1963.725133 1966.944020 1970.163120 1973.382433
 [625] 1976.601959 1979.821697 1983.041649 1986.261813 1989.482190 1992.702780
 [631] 1995.923583 1999.144599 2002.365828 2005.587269 2008.808923 2012.030791
 [637] 2015.252871 2018.475164 2021.697670 2024.920388 2028.143320 2031.366464
 [643] 2034.589821 2037.813392 2041.037175 2044.261170 2047.485379 2050.709801
 [649] 2053.934435 2057.159283 2060.384343 2063.609616 2066.835102 2070.060801
 [655] 2073.286712 2076.512837 2079.739174 2082.965724 2086.192487 2089.419463
 [661] 2092.646652 2095.874054 2099.101669 2102.329496 2105.557536 2108.785789
 [667] 2112.014255 2115.242934 2118.471826 2121.700931 2124.930248 2128.159779
 [673] 2131.389522 2134.619478 2137.849647 2141.080029 2144.310623 2147.541431
 [679] 2150.772451 2154.003684 2157.235130 2160.466789 2163.698661 2166.930746
 [685] 2170.163044 2173.395554 2176.628277 2179.861214 2183.094363 2186.327724
 [691] 2189.561299 2192.795087 2196.029087 2199.263301 2202.497727 2205.732366
 [697] 2208.967218 2212.202283 2215.437560 2218.673051 2221.908754 2225.144671
 [703] 2228.380800 2231.617142 2234.853697 2238.090464 2241.327445 2244.564638
 [709] 2247.802045 2251.039664 2254.277496 2257.515541 2260.753799 2263.992269
 [715] 2267.230953 2270.469849 2273.708959 2276.948281 2280.187816 2283.427563
 [721] 2286.667524 2289.907698 2293.148084 2296.388683 2299.629496 2302.870521
 [727] 2306.111758 2309.353209 2312.594873 2315.836749 2319.078839 2322.321141
 [733] 2325.563656 2328.806384 2332.049325 2335.292478 2338.535845 2341.779424
 [739] 2345.023216 2348.267222 2351.511439 2354.755870 2358.000514 2361.245371
 [745] 2364.490440 2367.735722 2370.981218 2374.226926 2377.472846 2380.718980
 [751] 2383.965327 2387.211886 2390.458659 2393.705644 2396.952842 2400.200253
 [757] 2403.447877 2406.695713 2409.943763 2413.192025 2416.440501 2419.689189
 [763] 2422.938090 2426.187204 2429.436530 2432.686070 2435.935822 2439.185788
 [769] 2442.435966 2445.686357 2448.936961 2452.187778 2455.438807 2458.690050
 [775] 2461.941505 2465.193173 2468.445054 2471.697148 2474.949455 2478.201975
 [781] 2481.454707 2484.707653 2487.960811 2491.214182 2494.467766 2497.721563
 [787] 2500.975573 2504.229796 2507.484231 2510.738879 2513.993741 2517.248815
 [793] 2520.504102 2523.759601 2527.015314 2530.271239 2533.527378 2536.783729
 [799] 2540.040293 2543.297070 2546.554060 2549.811263 2553.068678 2556.326307
 [805] 2559.584148 2562.842202 2566.100469 2569.358949 2572.617642 2575.876547
 [811] 2579.135666 2582.394997 2585.654542 2588.914299 2592.174269 2595.434451
 [817] 2598.694847 2601.955456 2605.216277 2608.477311 2611.738558 2615.000018
 [823] 2618.261691 2621.523577 2624.785675 2628.047987 2631.310511 2634.573248
 [829] 2637.836198 2641.099361 2644.362737 2647.626326 2650.890127 2654.154142
 [835] 2657.418369 2660.682809 2663.947462 2667.212328 2670.477406 2673.742698
 [841] 2677.008202 2680.273920 2683.539850 2686.805993 2690.072349 2693.338917
 [847] 2696.605699 2699.872693 2703.139901 2706.407321 2709.674954 2712.942800
 [853] 2716.210859 2719.479130 2722.747615 2726.016312 2729.285222 2732.554346
 [859] 2735.823682 2739.093230 2742.362992 2745.632967 2748.903154 2752.173554
 [865] 2755.444167 2758.714994 2761.986032 2765.257284 2768.528749 2771.800426
 [871] 2775.072317 2778.344420 2781.616736 2784.889265 2788.162007 2791.434961
 [877] 2794.708129 2797.981509 2801.255102 2804.528909 2807.802928 2811.077159
 [883] 2814.351604 2817.626262 2820.901132 2824.176215 2827.451512 2830.727021
 [889] 2834.002742 2837.278677 2840.554825 2843.831185 2847.107759 2850.384545
 [895] 2853.661544 2856.938756 2860.216181 2863.493818 2866.771669 2870.049732
 [901] 2873.328009 2876.606498 2879.885200 2883.164115 2886.443242 2889.722583
 [907] 2893.002136 2896.281903 2899.561882 2902.842074 2906.122479 2909.403097
 [913] 2912.683927 2915.964971 2919.246227 2922.527696 2925.809379 2929.091274
 [919] 2932.373381 2935.655702 2938.938236 2942.220982 2945.503941 2948.787113
 [925] 2952.070498 2955.354096 2958.637907 2961.921931 2965.206167 2968.490617
 [931] 2971.775279 2975.060154 2978.345242 2981.630542 2984.916056 2988.201783
 [937] 2991.487722 2994.773874 2998.060239 3001.346817 3004.633608 3007.920612
 [943] 3011.207829 3014.495258 3017.782900 3021.070755 3024.358823 3027.647104
 [949] 3030.935598 3034.224305 3037.513224 3040.802357 3044.091702 3047.381260
 [955] 3050.671031 3053.961015 3057.251211 3060.541621 3063.832243 3067.123078
 [961] 3070.414127 3073.705388 3076.996861 3080.288548 3083.580448 3086.872560
 [967] 3090.164886 3093.457424 3096.750175 3100.043139 3103.336315 3106.629705
 [973] 3109.923308 3113.217123 3116.511151 3119.805392 3123.099846 3126.394513
 [979] 3129.689393 3132.984485 3136.279791 3139.575309 3142.871040 3146.166984
 [985] 3149.463141 3152.759511 3156.056093 3159.352889 3162.649897 3165.947118
 [991] 3169.244552 3172.542199 3175.840059 3179.138132 3182.436417 3185.734916
 [997] 3189.033627 3192.332551 3195.631688 3198.931038 3202.230600 3205.530376
[1003] 3208.830364 3212.130566 3215.430980 3218.731607 3222.032447 3225.333500
[1009] 3228.634765 3231.936244 3235.237935 3238.539839 3241.841956 3245.144286
[1015] 3248.446829 3251.749585 3255.052553 3258.355735 3261.659129 3264.962736
[1021] 3268.266556 3271.570589 3274.874835 3278.179293

$C347
   [1]    9.836247   12.909976   15.983967   19.058220   22.132735   25.207512
   [7]   28.282552   31.357853   34.433416   37.509242   40.585329   43.661679
  [13]   46.738290   49.815164   52.892299   55.969697   59.047357   62.125278
  [19]   65.203462   68.281908   71.360616   74.439586   77.518818   80.598312
  [25]   83.678068   86.758087   89.838367   92.918909   95.999714   99.080780
  [31]  102.162108  105.243699  108.325551  111.407666  114.490043  117.572681
  [37]  120.655582  123.738745  126.822170  129.905857  132.989806  136.074017
  [43]  139.158490  142.243225  145.328222  148.413481  151.499003  154.584786
  [49]  157.670831  160.757139  163.843708  166.930540  170.017633  173.104989
  [55]  176.192607  179.280486  182.368628  185.457032  188.545698  191.634626
  [61]  194.723816  197.813268  200.902982  203.992958  207.083196  210.173697
  [67]  213.264459  216.355483  219.446770  222.538318  225.630129  228.722201
  [73]  231.814536  234.907133  237.999991  241.093112  244.186495  247.280140
  [79]  250.374047  253.468216  256.562647  259.657340  262.752295  265.847512
  [85]  268.942991  272.038733  275.134736  278.231001  281.327529  284.424318
  [91]  287.521370  290.618683  293.716259  296.814097  299.912196  303.010558
  [97]  306.109182  309.208068  312.307216  315.406626  318.506298  321.606232
 [103]  324.706428  327.806887  330.907607  334.008589  337.109833  340.211340
 [109]  343.313108  346.415139  349.517431  352.619986  355.722803  358.825881
 [115]  361.929222  365.032825  368.136690  371.240817  374.345206  377.449857
 [121]  380.554770  383.659945  386.765382  389.871082  392.977043  396.083266
 [127]  399.189752  402.296499  405.403509  408.510780  411.618314  414.726109
 [133]  417.834167  420.942487  424.051069  427.159912  430.269018  433.378386
 [139]  436.488016  439.597908  442.708062  445.818479  448.929157  452.040097
 [145]  455.151299  458.262764  461.374490  464.486479  467.598729  470.711242
 [151]  473.824016  476.937053  480.050352  483.163913  486.277735  489.391820
 [157]  492.506167  495.620776  498.735647  501.850780  504.966176  508.081833
 [163]  511.197752  514.313933  517.430377  520.547082  523.664049  526.781279
 [169]  529.898771  533.016524  536.134540  539.252818  542.371357  545.490159
 [175]  548.609223  551.728549  554.848137  557.967987  561.088099  564.208473
 [181]  567.329109  570.450007  573.571168  576.692590  579.814274  582.936221
 [187]  586.058429  589.180900  592.303632  595.426627  598.549884  601.673402
 [193]  604.797183  607.921226  611.045531  614.170098  617.294927  620.420018
 [199]  623.545371  626.670986  629.796863  632.923003  636.049404  639.176067
 [205]  642.302993  645.430180  648.557630  651.685341  654.813315  657.941551
 [211]  661.070048  664.198808  667.327830  670.457114  673.586660  676.716468
 [217]  679.846538  682.976870  686.107464  689.238320  692.369438  695.500819
 [223]  698.632461  701.764365  704.896532  708.028960  711.161651  714.294603
 [229]  717.427818  720.561295  723.695033  726.829034  729.963297  733.097822
 [235]  736.232609  739.367658  742.502969  745.638542  748.774377  751.910474
 [241]  755.046834  758.183455  761.320338  764.457484  767.594891  770.732561
 [247]  773.870492  777.008686  780.147142  783.285859  786.424839  789.564081
 [253]  792.703585  795.843351  798.983379  802.123669  805.264221  808.405035
 [259]  811.546111  814.687449  817.829050  820.970912  824.113036  827.255423
 [265]  830.398071  833.540982  836.684154  839.827589  842.971286  846.115244
 [271]  849.259465  852.403948  855.548693  858.693700  861.838969  864.984500
 [277]  868.130293  871.276348  874.422666  877.569245  880.716086  883.863189
 [283]  887.010555  890.158182  893.306072  896.454223  899.602637  902.751313
 [289]  905.900251  909.049450  912.198912  915.348636  918.498622  921.648870
 [295]  924.799380  927.950152  931.101186  934.252482  937.404041  940.555861
 [301]  943.707943  946.860288  950.012894  953.165763  956.318893  959.472286
 [307]  962.625940  965.779857  968.934036  972.088477  975.243180  978.398144
 [313]  981.553371  984.708860  987.864611  991.020625  994.176900  997.333437
 [319] 1000.490236 1003.647298 1006.804621 1009.962206 1013.120054 1016.278163
 [325] 1019.436535 1022.595169 1025.754064 1028.913222 1032.072642 1035.232324
 [331] 1038.392267 1041.552473 1044.712941 1047.873671 1051.034664 1054.195918
 [337] 1057.357434 1060.519212 1063.681252 1066.843555 1070.006119 1073.168946
 [343] 1076.332034 1079.495385 1082.658997 1085.822872 1088.987009 1092.151407
 [349] 1095.316068 1098.480991 1101.646176 1104.811623 1107.977332 1111.143303
 [355] 1114.309536 1117.476031 1120.642789 1123.809808 1126.977089 1130.144633
 [361] 1133.312438 1136.480506 1139.648835 1142.817427 1145.986280 1149.155396
 [367] 1152.324774 1155.494414 1158.664315 1161.834479 1165.004905 1168.175593
 [373] 1171.346543 1174.517755 1177.689229 1180.860966 1184.032964 1187.205224
 [379] 1190.377747 1193.550531 1196.723577 1199.896886 1203.070457 1206.244289
 [385] 1209.418384 1212.592741 1215.767359 1218.942240 1222.117383 1225.292788
 [391] 1228.468455 1231.644384 1234.820575 1237.997028 1241.173743 1244.350721
 [397] 1247.527960 1250.705461 1253.883225 1257.061250 1260.239537 1263.418087
 [403] 1266.596899 1269.775972 1272.955308 1276.134906 1279.314765 1282.494887
 [409] 1285.675271 1288.855917 1292.036825 1295.217995 1298.399427 1301.581122
 [415] 1304.763078 1307.945296 1311.127776 1314.310519 1317.493523 1320.676790
 [421] 1323.860318 1327.044109 1330.228161 1333.412476 1336.597053 1339.781891
 [427] 1342.966992 1346.152355 1349.337980 1352.523867 1355.710016 1358.896427
 [433] 1362.083100 1365.270035 1368.457233 1371.644692 1374.832413 1378.020397
 [439] 1381.208642 1384.397150 1387.585919 1390.774951 1393.964244 1397.153800
 [445] 1400.343618 1403.533698 1406.724040 1409.914643 1413.105509 1416.296637
 [451] 1419.488027 1422.679680 1425.871594 1429.063770 1432.256208 1435.448909
 [457] 1438.641871 1441.835095 1445.028582 1448.222330 1451.416341 1454.610614
 [463] 1457.805148 1460.999945 1464.195004 1467.390325 1470.585907 1473.781752
 [469] 1476.977859 1480.174228 1483.370860 1486.567753 1489.764908 1492.962325
 [475] 1496.160004 1499.357946 1502.556149 1505.754615 1508.953342 1512.152332
 [481] 1515.351583 1518.551097 1521.750873 1524.950910 1528.151210 1531.351772
 [487] 1534.552596 1537.753682 1540.955030 1544.156640 1547.358512 1550.560646
 [493] 1553.763043 1556.965701 1560.168621 1563.371803 1566.575248 1569.778954
 [499] 1572.982923 1576.187153 1579.391646 1582.596401 1585.801418 1589.006696
 [505] 1592.212237 1595.418040 1598.624105 1601.830432 1605.037021 1608.243872
 [511] 1611.450985 1614.658360 1617.865998 1621.073897 1624.282058 1627.490482
 [517] 1630.699167 1633.908115 1637.117324 1640.326796 1643.536530 1646.746525
 [523] 1649.956783 1653.167303 1656.378085 1659.589129 1662.800435 1666.012003
 [529] 1669.223833 1672.435925 1675.648279 1678.860895 1682.073774 1685.286914
 [535] 1688.500316 1691.713981 1694.927907 1698.142096 1701.356546 1704.571259
 [541] 1707.786234 1711.001470 1714.216969 1717.432730 1720.648753 1723.865038
 [547] 1727.081585 1730.298394 1733.515465 1736.732798 1739.950393 1743.168251
 [553] 1746.386370 1749.604751 1752.823395 1756.042300 1759.261468 1762.480897
 [559] 1765.700589 1768.920543 1772.140758 1775.361236 1778.581976 1781.802978
 [565] 1785.024242 1788.245768 1791.467556 1794.689606 1797.911918 1801.134492
 [571] 1804.357328 1807.580427 1810.803787 1814.027409 1817.251294 1820.475440
 [577] 1823.699849 1826.924519 1830.149452 1833.374647 1836.600103 1839.825822
 [583] 1843.051803 1846.278046 1849.504551 1852.731318 1855.958347 1859.185638
 [589] 1862.413191 1865.641006 1868.869084 1872.097423 1875.326024 1878.554888
 [595] 1881.784013 1885.013401 1888.243050 1891.472962 1894.703136 1897.933571
 [601] 1901.164269 1904.395229 1907.626451 1910.857935 1914.089681 1917.321689
 [607] 1920.553959 1923.786491 1927.019285 1930.252342 1933.485660 1936.719240
 [613] 1939.953083 1943.187187 1946.421553 1949.656182 1952.891073 1956.126225
 [619] 1959.361640 1962.597317 1965.833256 1969.069456 1972.305919 1975.542644
 [625] 1978.779631 1982.016880 1985.254391 1988.492165 1991.730200 1994.968497
 [631] 1998.207056 2001.445878 2004.684961 2007.924307 2011.163914 2014.403784
 [637] 2017.643915 2020.884309 2024.124965 2027.365883 2030.607062 2033.848504
 [643] 2037.090208 2040.332174 2043.574402 2046.816892 2050.059645 2053.302659
 [649] 2056.545935 2059.789473 2063.033274 2066.277336 2069.521661 2072.766247
 [655] 2076.011096 2079.256206 2082.501579 2085.747214 2088.993110 2092.239269
 [661] 2095.485690 2098.732373 2101.979318 2105.226525 2108.473994 2111.721725
 [667] 2114.969718 2118.217973 2121.466491 2124.715270 2127.964311 2131.213615
 [673] 2134.463180 2137.713008 2140.963097 2144.213449 2147.464063 2150.714939
 [679] 2153.966076 2157.217476 2160.469138 2163.721062 2166.973248 2170.225696
 [685] 2173.478406 2176.731378 2179.984612 2183.238109 2186.491867 2189.745887
 [691] 2193.000170 2196.254714 2199.509521 2202.764589 2206.019920 2209.275513
 [697] 2212.531367 2215.787484 2219.043863 2222.300504 2225.557407 2228.814572
 [703] 2232.071999 2235.329688 2238.587639 2241.845852 2245.104327 2248.363065
 [709] 2251.622064 2254.881325 2258.140849 2261.400634 2264.660682 2267.920991
 [715] 2271.181563 2274.442397 2277.703492 2280.964850 2284.226470 2287.488352
 [721] 2290.750496 2294.012902 2297.275570 2300.538500 2303.801692 2307.065146
 [727] 2310.328863 2313.592841 2316.857081 2320.121584 2323.386348 2326.651375
 [733] 2329.916663 2333.182214 2336.448027 2339.714101 2342.980438 2346.247037
 [739] 2349.513898 2352.781021 2356.048406 2359.316053 2362.583962 2365.852133
 [745] 2369.120566 2372.389261 2375.658219 2378.927438 2382.196919 2385.466663
 [751] 2388.736668 2392.006936 2395.277466 2398.548257 2401.819311 2405.090627
 [757] 2408.362204 2411.634044 2414.906146 2418.178510 2421.451136 2424.724024
 [763] 2427.997174 2431.270586 2434.544261 2437.818197 2441.092395 2444.366856
 [769] 2447.641578 2450.916563 2454.191809 2457.467318 2460.743088 2464.019121
 [775] 2467.295416 2470.571972 2473.848791 2477.125872 2480.403215 2483.680820
 [781] 2486.958687 2490.236816 2493.515207 2496.793861 2500.072776 2503.351953
 [787] 2506.631392 2509.911094 2513.191057 2516.471283 2519.751770 2523.032520
 [793] 2526.313532 2529.594805 2532.876341 2536.158139 2539.440199 2542.722521
 [799] 2546.005105 2549.287951 2552.571059 2555.854429 2559.138061 2562.421955
 [805] 2565.706111 2568.990530 2572.275210 2575.560153 2578.845357 2582.130824
 [811] 2585.416552 2588.702543 2591.988795 2595.275310 2598.562087 2601.849126
 [817] 2605.136427 2608.423990 2611.711815 2614.999902 2618.288251 2621.576862
 [823] 2624.865735 2628.154870 2631.444268 2634.733927 2638.023848 2641.314032
 [829] 2644.604477 2647.895185 2651.186155 2654.477386 2657.768880 2661.060636
 [835] 2664.352653 2667.644933 2670.937475 2674.230279 2677.523345 2680.816673
 [841] 2684.110263 2687.404116 2690.698230 2693.992606 2697.287244 2700.582145
 [847] 2703.877307 2707.172732 2710.468418 2713.764367 2717.060577 2720.357050
 [853] 2723.653785 2726.950782 2730.248041 2733.545561 2736.843344 2740.141389
 [859] 2743.439696 2746.738266 2750.037097 2753.336190 2756.635545 2759.935162
 [865] 2763.235042 2766.535183 2769.835587 2773.136252 2776.437180 2779.738369
 [871] 2783.039821 2786.341535 2789.643511 2792.945748 2796.248248 2799.551010
 [877] 2802.854034 2806.157320 2809.460868 2812.764678 2816.068751 2819.373085
 [883] 2822.677681 2825.982539 2829.287660 2832.593042 2835.898687 2839.204593
 [889] 2842.510762 2845.817192 2849.123885 2852.430840 2855.738057 2859.045536
 [895] 2862.353276 2865.661279 2868.969544 2872.278071 2875.586861 2878.895912
 [901] 2882.205225 2885.514800 2888.824638 2892.134737 2895.445098 2898.755722
 [907] 2902.066607 2905.377755 2908.689165 2912.000836 2915.312770 2918.624966
 [913] 2921.937424 2925.250143 2928.563125 2931.876369 2935.189875 2938.503643
 [919] 2941.817674 2945.131966 2948.446520 2951.761336 2955.076415 2958.391755
 [925] 2961.707357 2965.023222 2968.339348 2971.655737 2974.972388 2978.289300
 [931] 2981.606475 2984.923912 2988.241611 2991.559572 2994.877795 2998.196280
 [937] 3001.515027 3004.834036 3008.153307 3011.472840 3014.792636 3018.112693
 [943] 3021.433012 3024.753594 3028.074437 3031.395543 3034.716910 3038.038540
 [949] 3041.360432 3044.682585 3048.005001 3051.327679 3054.650619 3057.973821
 [955] 3061.297285 3064.621011 3067.944999 3071.269249 3074.593761 3077.918535
 [961] 3081.243572 3084.568870 3087.894430 3091.220253 3094.546337 3097.872684
 [967] 3101.199293 3104.526163 3107.853296 3111.180691 3114.508348 3117.836266
 [973] 3121.164447 3124.492890 3127.821595 3131.150562 3134.479791 3137.809283
 [979] 3141.139036 3144.469051 3147.799328 3151.129868 3154.460669 3157.791733
 [985] 3161.123058 3164.454646 3167.786495 3171.118607 3174.450981 3177.783617
 [991] 3181.116515 3184.449674 3187.783096 3191.116780 3194.450726 3197.784934
 [997] 3201.119405 3204.454137 3207.789131 3211.124387 3214.459906 3217.795686
[1003] 3221.131729 3224.468033 3227.804600 3231.141428 3234.478519 3237.815872
[1009] 3241.153486 3244.491363 3247.829502 3251.167903 3254.506566 3257.845491
[1015] 3261.184678 3264.524127 3267.863838 3271.203812 3274.544047 3277.884544
[1021] 3281.225304 3284.566325 3287.907609 3291.249154

> spc[[1]]
Gamma spectrum:
*  name: BRIQUE
*  date: 2009-08-28 11:43:20
*  live_time: 8473.45
*  real_time: 8501.68
*  channels: 1024
*  energy_min: 3.83
*  energy_max: 3243.21
> spc[["BRIQUE"]]
Gamma spectrum:
*  name: BRIQUE
*  date: 2009-08-28 11:43:20
*  live_time: 8473.45
*  real_time: 8501.68
*  channels: 1024
*  energy_min: 3.83
*  energy_max: 3243.21
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GammaSpectra-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GammaSpectrum-class")
> ### * GammaSpectrum-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GammaSpectrum-class
> ### Title: An S4 Class to Represent a Gamma Sectrum
> ### Aliases: GammaSpectrum-class .GammaSpectrum
> 
> ### ** Examples
> 
> ## Import a Canberra CNF file
> spc_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> (spc <- read(spc_file))
Gamma spectrum:
*  name: LaBr
*  date: 2019-02-07 11:48:18
*  live_time: 3385.54
*  real_time: 3403.67
*  channels: 1024
*  energy_min: -7
*  energy_max: 3124.91
> 
> ## Access
> get_hash(spc)
[1] "e0a2c67173cf7f407db7148ae0058bbf"
> get_names(spc)
[1] "LaBr"
> get_livetime(spc)
[1] 3385.54
> get_realtime(spc)
[1] 3403.67
> 
> length(spc)
[1] 1024
> range_energy(spc)
[1]   -7.004032 3124.914528
> 
> ## Subset
> spc[["date"]]
[1] "2019-02-07 11:48:18 CET"
> spc[["instrument"]]
[1] "InSpector 1000"
> spc[["file_format"]]
[1] "CNF"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GammaSpectrum-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("baseline")
> ### * baseline
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: baseline
> ### Title: Baseline Estimation and Removal
> ### Aliases: baseline signal_baseline baseline-method signal_correct
> ###   signal_correct-method baseline_snip baseline_snip-method
> ###   baseline_rubberband baseline_rubberband-method baseline_linear
> ###   baseline_linear-method signal_baseline,GammaSpectrum-method
> ###   signal_baseline,GammaSpectra-method
> ###   signal_correct,GammaSpectrum-method
> ###   signal_correct,GammaSpectra-method
> ###   baseline_linear,GammaSpectrum-method
> ###   baseline_linear,GammaSpectra-method
> ###   baseline_rubberband,GammaSpectrum-method
> ###   baseline_rubberband,GammaSpectra-method
> ###   baseline_snip,GammaSpectrum-method baseline_snip,GammaSpectra-method
> 
> ### ** Examples
> 
> ## Import a CNF file
> spc_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> spc <- read(spc_file)
> 
> ## Remove the first 35 channels
> spc <- signal_slice(spc, -c(1:35))
> 
> ## Linear baseline
> bsl_linear <- baseline_linear(spc, from = 250, to = 750)
> plot(spc, bsl_linear)
> 
> ## SNIP baseline
> bsl_snip <- baseline_snip(spc, LLS = FALSE, decreasing = FALSE, n = 100)
> plot(spc, bsl_snip)
> 
> ## Rubberband baseline
> bsl_rubber <- baseline_rubberband(spc)
> plot(spc, bsl_rubber)
> 
> ## Remove baseline
> spc_clean1 <- signal_correct(spc)
> spc_clean2 <- spc - bsl_snip
> all(spc_clean1 == spc_clean2)
[1] TRUE
> 
> plot(spc_clean1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("baseline", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("coerce")
> ### * coerce
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: coerce
> ### Title: Coerce
> ### Aliases: coerce as.matrix.GammaSpectrum
> 
> ### ** Examples
> 
> ## Import a Canberra CNF file
> spc_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> spc <- read(spc_file)
> 
> ## Coerce
> mtx <- as.matrix(spc)
> df <- as.data.frame(spc)
> head(df)
  channel    energy count rate
1       1 -7.004032     0    0
2       2 -4.007936     0    0
3       3 -1.011712     0    0
4       4  1.984640     0    0
5       5  4.981120     0    0
6       6  7.977728     0    0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("coerce", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("doserate")
> ### * doserate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: doserate
> ### Title: Dose Rate Estimation
> ### Aliases: doserate dose_fit dose_fit-method dose_predict
> ###   dose_predict-method dose_fit,GammaSpectra,GammaSpectrum,matrix-method
> ###   dose_fit,GammaSpectra,GammaSpectrum,data.frame-method
> ###   dose_fit,GammaSpectra,data.frame-method
> ###   dose_predict,CalibrationCurve,missing-method
> ###   dose_predict,CalibrationCurve,GammaSpectrum-method
> ###   dose_predict,CalibrationCurve,GammaSpectra-method
> 
> ### ** Examples
> 
> ## Import CNF files
> ## Spectra
> spc_dir <- system.file("extdata/BDX_LaBr_1/calibration", package = "gamma")
> spc <- read(spc_dir)
> 
> ## Background
> bkg_dir <- system.file("extdata/BDX_LaBr_1/background", package = "gamma")
> bkg <- read(bkg_dir)
> 
> ## Get dose rate values
> data("clermont")
> (doses <- clermont[, c("gamma_dose", "gamma_error")])
       gamma_dose gamma_error
BRIQUE  1986.4620   35.619679
C341     849.9668   21.317615
C347    1423.8589   25.249756
GOU     1575.2249   17.433789
LAS     1083.6737    9.570593
LMP      641.9004   17.560649
MAZ     1141.4033   11.665045
MPX      964.0196   13.274167
PEP     2538.2217  112.169131
> 
> ## Build the calibration curve
> calib_curve <- dose_fit(spc, bkg, doses,
+                         range_Ni = c(300, 2800),
+                         range_NiEi = c(165, 2800))
> 
> ## Plot the curve
> plot(calib_curve, threshold = "Ni")
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <ce>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Dose rate [μGy/y]' in 'mbcsToSbcs': dot substituted for <bc>
> 
> ## Estimate gamma dose rates
> dose_predict(calib_curve, spc)
   names   dose_Ni error_Ni dose_NiEi error_NiEi
1 BRIQUE 1955.8683 43.71337 1946.9606   39.37676
2   C341  843.9938 21.06715  843.0632   17.05363
3   C347 1420.1912 34.20341 1402.5391   28.36913
4    GOU 1599.0175 37.35386 1598.6341   32.33397
5    LMP  640.1782 16.98411  639.0612   12.92850
6    MAZ 1140.4575 27.44022 1144.1496   23.14262
7    PEP 2443.3517 57.49673 2435.1440   49.25371
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("doserate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("energy")
> ### * energy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: energy
> ### Title: Energy Scale Calibration
> ### Aliases: energy energy_calibrate energy_calibrate-method has_energy
> ###   has_calibration energy_calibrate,GammaSpectrum,list-method
> ###   energy_calibrate,GammaSpectrum,PeakPosition-method
> ###   has_energy,GammaSpectrum-method has_energy,GammaSpectra-method
> ###   has_calibration,GammaSpectrum-method
> ###   has_calibration,GammaSpectra-method
> 
> ### ** Examples
> 
> ## Import a CNF file
> spc_file <- system.file("extdata/LaBr.TKA", package = "gamma")
> (spc <- read(spc_file))
Gamma spectrum:
*  name: LaBr
*  date: 2023-01-04 09:39:47.289261
*  live_time: 3385.54
*  real_time: 3403.67
*  channels: 1024
*  energy_min: NA
*  energy_max: NA
> 
> ## Set peak positions (channel) and expected energy values
> calib_lines <- list(
+   channel = c(86, 495, 879),
+   energy = c(238, 1461, 2615)
+ )
> 
> ## Adjust the energy scale
> (spc1 <- energy_calibrate(spc, lines = calib_lines))
Gamma spectrum:
*  name: LaBr
*  date: 2023-01-04 09:39:47.289261
*  live_time: 3385.54
*  real_time: 3403.67
*  channels: 1024
*  energy_min: -15.38
*  energy_max: 3052.2
> 
> ## Inspect results
> plot(spc1, xaxis = "energy", yaxis = "count") +
+   ggplot2::geom_vline(xintercept = c(238, 1461, 2615), linetype = 3)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("energy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("operator")
> ### * operator
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: operator
> ### Title: Common Operations on GammaSpectrum Objects
> ### Aliases: operator Arith,GammaSpectrum,GammaSpectrum-method
> ###   Arith,GammaSpectrum,numeric-method
> ###   Compare,GammaSpectrum,GammaSpectrum-method
> ###   Compare,GammaSpectrum,numeric-method
> ###   Logic,GammaSpectrum,GammaSpectrum-method
> ###   Logic,GammaSpectrum,numeric-method Logic,GammaSpectrum,logical-method
> ###   Math,GammaSpectrum-method Math2,GammaSpectrum-method
> ###   Summary,GammaSpectrum-method
> 
> ### ** Examples
> 
> ## No examples
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("operator", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("peaks_find")
> ### * peaks_find
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: peaks_find
> ### Title: Find Peaks
> ### Aliases: peaks_find peaks_find-method peaks_find,GammaSpectrum-method
> 
> ### ** Examples
> 
> ## Import a LaBr spectrum
> LaBr_file <- system.file("extdata/LaBr.TKA", package = "gamma")
> LaBr_spc <- read(LaBr_file)
> 
> ## Find peaks by channel
> (LaBr_pks <- peaks_find(LaBr_spc)) # Ugly
2 peaks were detected.
> plot(LaBr_spc, LaBr_pks)
> 
> ## Search peaks by channel
> (LaBr_pks <- peaks_search(LaBr_spc, index = c(86L, 207L, 496L), span = 7))
3 peaks were detected.
> plot(LaBr_spc, LaBr_pks, split = TRUE)
> 
> ## Import a BEGe spectrum
> BEGe_file <- system.file("extdata/BEGe.CNF", package = "gamma")
> BEGe_spc <- read(BEGe_file)
> 
> ## Search peaks by energy
> (BEGe_pks <- peaks_search(BEGe_spc, index = c(47, 63, 911, 1460)))
4 peaks were detected.
> plot(BEGe_spc, BEGe_pks, split = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("peaks_find", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("peaks_search")
> ### * peaks_search
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: peaks_search
> ### Title: Search Peaks
> ### Aliases: peaks_search peaks_search-method
> ###   peaks_search,GammaSpectrum,integer-method
> ###   peaks_search,GammaSpectrum,numeric-method
> 
> ### ** Examples
> 
> ## Import a LaBr spectrum
> LaBr_file <- system.file("extdata/LaBr.TKA", package = "gamma")
> LaBr_spc <- read(LaBr_file)
> 
> ## Find peaks by channel
> (LaBr_pks <- peaks_find(LaBr_spc)) # Ugly
2 peaks were detected.
> plot(LaBr_spc, LaBr_pks)
> 
> ## Search peaks by channel
> (LaBr_pks <- peaks_search(LaBr_spc, index = c(86L, 207L, 496L), span = 7))
3 peaks were detected.
> plot(LaBr_spc, LaBr_pks, split = TRUE)
> 
> ## Import a BEGe spectrum
> BEGe_file <- system.file("extdata/BEGe.CNF", package = "gamma")
> BEGe_spc <- read(BEGe_file)
> 
> ## Search peaks by energy
> (BEGe_pks <- peaks_search(BEGe_spc, index = c(47, 63, 911, 1460)))
4 peaks were detected.
> plot(BEGe_spc, BEGe_pks, split = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("peaks_search", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot")
> ### * plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot
> ### Title: Plot
> ### Aliases: plot plot-method plot,GammaSpectrum,missing-method
> ###   plot,GammaSpectrum,Baseline-method plot,GammaSpectra,missing-method
> ###   plot,GammaSpectrum,PeakPosition-method
> ###   plot,CalibrationCurve,missing-method
> 
> ### ** Examples
> 
> # Import CNF files
> spc_dir <- system.file("extdata/BDX_LaBr_1/calibration", package = "gamma")
> spc <- read(spc_dir)
> 
> # Plot all spectra
> plot(spc, yaxis = "rate", facet = FALSE) +
+   ggplot2::theme_bw()
> 
> # Plot the spectrum named 'BRIQUE'
> plot(spc, xaxis = "energy", yaxis = "count", select = "BRIQUE") +
+   ggplot2::theme_bw()
> 
> # Plot the first three spectra
> plot(spc, xaxis = "channel", yaxis = "rate", select = 1:3, facet = TRUE) +
+   ggplot2::theme_bw()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read")
> ### * read
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read
> ### Title: Data Input
> ### Aliases: read read-method read,character-method
> 
> ### ** Examples
> 
> ## Import a Canberra CNF file
> cnf_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> (cnf_spc <- read(cnf_file))
Gamma spectrum:
*  name: LaBr
*  date: 2019-02-07 11:48:18
*  live_time: 3385.54
*  real_time: 3403.67
*  channels: 1024
*  energy_min: -7
*  energy_max: 3124.91
> 
> ## Import a TKA file
> tka_file <- system.file("extdata/LaBr.TKA", package = "gamma")
> (tka_spc <- read(tka_file))
Gamma spectrum:
*  name: LaBr
*  date: 2023-01-04 09:39:47.289261
*  live_time: 3385.54
*  real_time: 3403.67
*  channels: 1024
*  energy_min: NA
*  energy_max: NA
> 
> ## Import all files in a given directory
> spc_dir <- system.file("extdata/BDX_LaBr_1/calibration", package = "gamma")
> (spc <- read(spc_dir))
A collection of 7 gamma spectra: BRIQUE, C341, C347, GOU, LMP, MAZ, PEP
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("signal_slice")
> ### * signal_slice
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: signal_slice
> ### Title: Choose channels by Position
> ### Aliases: signal_slice signal_slice-method
> ###   signal_slice,GammaSpectrum-method signal_slice,GammaSpectra-method
> 
> ### ** Examples
> 
> ## Import CNF files
> spc_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> spc <- read(spc_file)
> 
> ## Plot spectrum
> plot(spc)
> 
> ## Slice
> sliced <- signal_slice(spc)
> plot(sliced)
> 
> sliced <- signal_slice(spc, -c(1:35))
> plot(sliced)
> 
> sliced <- signal_slice(sliced, 450:550)
> plot(sliced)
> 
> ## Split
> g <- rep(c("A", "B", "C"), c(250, 500, 274))
> splited <- signal_split(spc, g)
> plot(splited, facet = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("signal_slice", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("signal_split")
> ### * signal_split
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: signal_split
> ### Title: Split
> ### Aliases: signal_split signal_split-method
> ###   signal_split,GammaSpectrum-method
> 
> ### ** Examples
> 
> ## Import CNF files
> spc_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> spc <- read(spc_file)
> 
> ## Plot spectrum
> plot(spc)
> 
> ## Slice
> sliced <- signal_slice(spc)
> plot(sliced)
> 
> sliced <- signal_slice(spc, -c(1:35))
> plot(sliced)
> 
> sliced <- signal_slice(sliced, 450:550)
> plot(sliced)
> 
> ## Split
> g <- rep(c("A", "B", "C"), c(250, 500, 274))
> splited <- signal_split(spc, g)
> plot(splited, facet = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("signal_split", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("smooth")
> ### * smooth
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: smooth
> ### Title: Smooth
> ### Aliases: smooth signal_smooth signal_smooth-method smooth_rectangular
> ###   smooth_rectangular-method smooth_triangular smooth_triangular-method
> ###   smooth_savitzky smooth_savitzky-method
> ###   signal_smooth,GammaSpectrum-method signal_smooth,GammaSpectra-method
> ###   smooth_rectangular,GammaSpectrum-method
> ###   smooth_rectangular,GammaSpectra-method
> ###   smooth_savitzky,GammaSpectrum-method
> ###   smooth_savitzky,GammaSpectra-method
> ###   smooth_triangular,GammaSpectrum-method
> ###   smooth_triangular,GammaSpectra-method
> 
> ### ** Examples
> 
> # Import CNF files
> spc_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> spc <- read(spc_file)
> spc <- signal_slice(spc, -c(1:35))
> 
> # Plot raw spectrum
> spc_clean <- signal_correct(spc)
> plot(spc_clean)
> 
> # Rectangular smooth
> spc_unweighted <- smooth_rectangular(spc, m = 3)
> spc_unweighted_clean <- signal_correct(spc_unweighted)
> plot(spc_unweighted_clean)
> 
> # Triangular smooth
> spc_weighted <- smooth_triangular(spc, m = 5)
> spc_weighted_clean <- signal_correct(spc_weighted)
> plot(spc_weighted_clean)
> 
> # Savitzky–Golay
> spc_savitzky <- smooth_savitzky(spc, m = 21, p = 2)
> spc_savitzky_clean <- signal_correct(spc_savitzky)
> plot(spc_savitzky_clean)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("smooth", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summarise")
> ### * summarise
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summarise
> ### Title: Summarize
> ### Aliases: summarise summarise-method summarise,GammaSpectrum-method
> ###   summarise,GammaSpectra-method summarise,DoseRateModel-method
> ###   summarise,CalibrationCurve-method
> 
> ### ** Examples
> 
> ## Import a Canberra CNF file
> cnf_file <- system.file("extdata/LaBr.CNF", package = "gamma")
> spc <- read(cnf_file)
> summarise(spc)
  name                date live_time real_time channels energy_min energy_max
1 LaBr 2019-02-07 11:48:18   3385.54   3403.67     1024         -7    3124.91
> 
> ## Import all CNF files in a given directory
> spc_dir <- system.file("extdata/BDX_LaBr_1/calibration", package = "gamma")
> spc <- read(spc_dir)
> summarise(spc)
         name                date live_time real_time channels energy_min
BRIQUE BRIQUE 2009-08-28 11:43:20   8473.45   8501.68     1024       3.83
C341     C341 2009-09-07 15:10:52    976.08    978.36     1024       8.99
C347     C347 2009-09-07 14:56:02    703.92    705.96     1024       9.84
GOU       GOU 2009-09-07 18:34:19   1008.58   1011.56     1024       7.91
LMP       LMP 2009-09-07 16:59:25    908.20    910.17     1024      10.93
MAZ       MAZ 2009-09-07 17:47:29    965.86    968.34     1024       9.28
PEP       PEP 2009-09-07 16:31:17    507.07    508.96     1024       7.35
       energy_max
BRIQUE    3243.21
C341      3278.18
C347      3291.25
GOU       3244.38
LMP       3273.94
MAZ       3248.53
PEP       3252.67
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summarise", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.297 0.123 5.493 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
